x = gdpPercap,
y = lifeExp,
color = "chartreuse4"))
p + geom_point() +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp))
p + geom_point(color="chartreuse4") +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
p <- ggplot(gapminder, mapping = aes(
x = gdpPercap,
y = lifeExp,
color = continent,
fill = continent))
p + geom_point() +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
p + geom_point(alpha=0.5) +
geom_smooth(method="lm", color="cadetblue1", se = FALSE, size = 4, alpha = 0.3) +
scale_x_log10(labels=scales::dollar)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp))
p + geom_point(color="chartreuse4") +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
p + geom_point(alpha=0.5) +
geom_smooth(method="lm", color="cadetblue1", se = FALSE, size = 4, alpha = 0.3) +
scale_x_log10(labels=scales::dollar)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp)) +
geom_point(alpha = 0.3) +
geom_smooth(method="gam") +
scale_x_log10(labels=scales::dollar) +
labs(
x = "GDP per capita",
y = "Life expectancy (years)",
title = "Relationship between Economy and Life Expectancy",
subtitle = "Each dot represents a country-year",
caption = "Data source: gapminder"
)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp))
p + geom_point(alpha = 0.3) +
geom_smooth(method="gam") +
scale_x_log10(labels=scales::dollar) +
labs(
x = "GDP per capita",
y = "Life expectancy (years)",
title = "Relationship between Economy and Life Expectancy",
subtitle = "Each dot represents a country-year",
caption = "Data source: gapminder"
)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp))
p + geom_point(mapping = aes(color = continent)) +
geom_smooth(method = "loess") +
scale_x_log10(labels = scales::dollar)
p <- ggplot(
data = filter(gapminder, year == 2007),
mapping = aes(
x = gdpPercap,
y = lifeExp,
shape = continent))
p <- ggplot(
data = gapminder[which(year == 2007),]),
p <- ggplot(
data = gapminder[which(gapminder$year == 2007),]),
p <- ggplot(
data = gapminder[which(gapminder$year == 2007),],
mapping = aes(
x = gdpPercap,
y = lifeExp,
shape = continent))
p + geom_point(alpha = 0.4, size = 4) +
scale_x_log10(labels = scales::dollar)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp,
color = log(pop)))
p + geom_point() +
geom_smooth(method = "loess") +
scale_x_log10(labels = scales::dollar)
getwd()
#| eval: false
ggsave(filename = "filename.png")
p <- ggplot(gapminder, aes(
x = year,
y = lifeExp)) +
geom_line()
p <- ggplot(gapminder, aes(
x = year,
y = lifeExp,
group = country)) +
geom_line()
gapminder[which(gapminder$lifeExp < 3 & gapminder$year >= 1990),]
View(gapminder)
gapminder[which(gapminder$lifeExp < 30 & gapminder$year >= 1990),]
ggplot(gapminder[which(gapminder$country == "Rwanda")],
aes(x = year,
y = lifeExp)) +
geom_line()
ggplot(gapminder[which(gapminder$country == "Rwanda"),],
aes(x = year,
y = lifeExp)) +
geom_line()
ggplot(gapminder[which(gapminder$country == "Rwanda"),],
aes(
x = year,
y = lifeExp)) +
geom_line()+
geom_point()
ggplot(gapminder, aes(
x = year,
y = lifeExp,
group = country)) +
geom_line() +
facet_wrap(~ continent)
ggplot(gapminder, aes(
x = year,
y = lifeExp)) +
geom_line(
mapping = aes(group = country),
color = "gray70") +
geom_smooth(
method = "loess",
color = "cyan",
se = FALSE,
size = 1.1) +
facet_wrap(~ continent, ncol = 2) +
labs(
x = "Year",
y = "Life expectancy ",
title = "Trends in life expectancy in each country across five continents")
p <- ggplot(gss_sm, aes(
x = age,
y = childs)) +
geom_point(alpha = 0.2)
p + geom_point(alpha = 0.2) +
facet_grid(sex ~ race)
p + geom_point(alpha = 0.2) +
geom_smooth() +
facet_grid(sex ~ race)
ggplot(gss_sm, aes(
x = bigregion)) +
geom_bar()
# Step 1: Count frequency of each region
freq_table <- table(gss_sm$bigregion)
# Step 2: Convert table to data frame
df1 <- data.frame(bigregion = names(freq_table), n = as.numeric(freq_table))
# Step 3: Add ratio column
df1$ratio <- df1$n / sum(df1$n)
# Step 4: Create bar chart using ggplot2
ggplot(df1, aes(
x = bigregion,
y = n)) +
geom_col() +
labs(y = "Count")
ggplot(df1, aes(
x = bigregion,
y = ratio)) +
geom_col() +
labs(y = "Ratio")
ggplot(df1, aes(
x = bigregion,
y = ratio)) +
geom_col() +
labs(y = "Ratio") +
theme(
axis.text.x = element_text(
angle = 45, vjust = 1, hjust = 1))
ggplot(df1, aes(
x = bigregion,
y = ratio)) +
geom_col() +
labs(y = "Ratio") +
coord_flip()
# Count the number of observations for each religion
religion_counts <- as.data.frame(table(gss_sm$religion))
colnames(religion_counts) <- c("religion", "n")
p <- ggplot(df2, aes(
x = religion,
y = n,
fill = religion))
# Count the number of observations for each religion
religion_counts <- as.data.frame(table(gss_sm$religion))
colnames(religion_counts) <- c("religion", "n")
p <- ggplot(religion_counts, aes(
x = religion,
y = n,
fill = religion))
p + geom_col() +
labs(y = "Count")
p + geom_col() +
guides(fill = "none") +
labs(y = "Count")
# Count the number of observations for each religion
df2 <- as.data.frame(table(gss_sm$religion))
colnames(df2) <- c("religion", "n")
p <- ggplot(religion_counts, aes(
x = religion,
y = n,
fill = religion))
p + geom_col() +
labs(y = "Count")
p + geom_col() +
guides(fill = "none") +
labs(y = "Count")
# Count frequency by bigregion and religion
tab <- table(gss_sm$bigregion, gss_sm$religion)
df3 <- as.data.frame(tab)
names(df3) <- c("bigregion", "religion", "n")
# Calculate ratio within each bigregion group
df3$ratio <- ave(df3$n, df3$bigregion, FUN = function(x) x / sum(x))
p <- ggplot(df3, aes(
x = bigregion,
y = n,
fill = religion)) +
geom_col()
p + geom_col(position = "fill") +
labs(y = NULL)
p + geom_col(position = "dodge")
# Count frequency by bigregion and religion
tab <- table(gss_sm$bigregion, gss_sm$religion)
df3 <- as.data.frame(tab)
names(df3) <- c("bigregion", "religion", "n")
# Calculate ratio within each bigregion group
df3$ratio <- ave(df3$n, df3$bigregion, FUN = function(x) x / sum(x))
p <- ggplot(df3, aes(
x = bigregion,
y = n,
fill = religion)) +
geom_col()
p + geom_col(position = "fill") +
labs(y = NULL)
p + geom_col(position = "dodge")
ggplot(df3, aes(
x = bigregion,
y = ratio,
fill = religion)) +
geom_col(position = "dodge")
p + geom_col(position = "dodge")
ggplot(df3, aes(
x = bigregion,
y = ratio,
fill = religion)) +
geom_col(position = "dodge")
ggplot(df3, aes(
x = bigregion,
y = n,
fill = religion)) +
geom_col(position = "dodge")
ggplot(df3, aes(
x = religion, y = ratio, fill=religion)) +
　geom_col(position="dodge") +
labs(x=NULL, y="比例") +
coord_flip() +
facet_grid(~ bigregion) +
guides(fill="none")
ggplot(df3, aes(
x = religion, y = ratio, fill=religion)) +
　geom_col(position="dodge") +
labs(x=NULL, y="Ratio") +
coord_flip() +
facet_grid(~ bigregion) +
guides(fill="none")
p <- ggplot(midwest, aes(x = area))
p + geom_histogram()
p + geom_histogram(bins = 15)
# Filter for states OH and WI using base R
midwest_sub <- midwest[midwest$state %in% c("OH", "WI"), ]
ggplot(midwest_sub, aes(
x = area, fill = state)) +
geom_histogram(bins = 10)
ggplot(midwest, aes(x = area)) +
geom_density()
ggplot(midwest, aes(
x = area,
color = state,
fill = state)) +
geom_density(alpha = 0.3)
ggplot(midwest, aes(
x = area,
color = state)) +
geom_line(stat = "density")
ggplot(midwest, aes(x = area)) +
geom_histogram(
mapping = aes(y = ..density..),
alpha = 0.6) +
geom_density(size = 1.1)
?mean
# Step 1: Count frequency of each region
freq_table <- table(gss_sm$bigregion)
# install.packages("ggplot2")
library(ggplot2)
# install.packages("gapminder")
library(gapminder)
head(gapminder, 20)
# install.packages("socviz")
library(socviz)
head(gss_sm, 20)
p <- ggplot(gapminder, aes(
x = year,
y = lifeExp)) +
geom_line()
p <- ggplot(gapminder, aes(
x = year,
y = lifeExp,
group = country)) +
geom_line()
gapminder[which(gapminder$lifeExp < 30 & gapminder$year >= 1990),]
# Step 1: Count frequency of each region
freq_table <- table(gss_sm$bigregion)
# Step 2: Convert table to data frame
df1 <- data.frame(bigregion = names(freq_table), n = as.numeric(freq_table))
# Step 3: Add ratio column
df1$ratio <- df1$n / sum(df1$n)
# Step 4: Create bar chart using ggplot2
ggplot(df1, aes(
x = bigregion,
y = n)) +
geom_col() +
labs(y = "Count")
ggplot(df1, aes(
x = bigregion,
y = ratio)) +
geom_col() +
labs(y = "Ratio")
ggplot(df1, aes(
x = bigregion,
y = ratio)) +
geom_col() +
labs(y = "Ratio") +
theme(
axis.text.x = element_text(
angle = 45, vjust = 1, hjust = 1))
ggplot(df1, aes(
x = bigregion,
y = ratio)) +
geom_col() +
labs(y = "Ratio") +
coord_flip()
# Count the number of observations for each religion
df2 <- as.data.frame(table(gss_sm$religion))
colnames(df2) <- c("religion", "n")
p <- ggplot(religion_counts, aes(
x = religion,
y = n,
fill = religion))
# Count the number of observations for each religion
df2 <- as.data.frame(table(gss_sm$religion))
colnames(df2) <- c("religion", "n")
p <- ggplot(df2, aes(
x = religion,
y = n,
fill = religion))
p + geom_col() +
labs(y = "Count")
p + geom_col() +
guides(fill = "none") +
labs(y = "Count")
# Count frequency by bigregion and religion
tab <- table(gss_sm$bigregion, gss_sm$religion)
df3 <- as.data.frame(tab)
names(df3) <- c("bigregion", "religion", "n")
# Calculate ratio within each bigregion group
df3$ratio <- ave(df3$n, df3$bigregion, FUN = function(x) x / sum(x))
p <- ggplot(df3, aes(
x = bigregion,
y = n,
fill = religion)) +
geom_col()
p + geom_col(position = "fill") +
labs(y = NULL)
ggplot(df3, aes(
x = bigregion,
y = n,
fill = religion)) +
geom_col(position = "dodge")
ggplot(df3, aes(
x = bigregion,
y = ratio,
fill = religion)) +
geom_col(position = "dodge")
ggplot(df3, aes(
x = religion, y = ratio, fill=religion)) +
　geom_col(position="dodge") +
labs(x=NULL, y="Ratio") +
coord_flip() +
facet_grid(~ bigregion) +
guides(fill="none")
p <- ggplot(midwest, aes(x = area))
p + geom_histogram()
p + geom_histogram(bins = 15)
# Filter for states OH and WI using base R
midwest_sub <- midwest[midwest$state %in% c("OH", "WI"), ]
ggplot(midwest_sub, aes(
x = area, fill = state)) +
geom_histogram(bins = 10)
ggplot(midwest, aes(x = area)) +
geom_density()
ggplot(midwest, aes(
x = area,
color = state,
fill = state)) +
geom_density(alpha = 0.3)
ggplot(midwest, aes(
x = area,
color = state)) +
geom_line(stat = "density")
ggplot(midwest, aes(x = area)) +
geom_histogram(
mapping = aes(y = ..density..),
alpha = 0.6) +
geom_density(size = 1.1)
colombia_selected <- colombia_data[,c("calendar_start_date", "calendar_end_date", "Year", "dengue_tot")]
colombia_data <- read.csv("data/National-level data_COLOMBIA_20021229_20221231.csv")
colombia_selected <- colombia_data[,c("calendar_start_date", "calendar_end_date", "Year", "dengue_tot")]
names(colombia_data)
colombia_data <- read.csv("data/National-level data_COLOMBIA_20021229_20221231.csv")
View(colombia_data)
head(colombia_data)
str(colombia_data)
# get the value in the 1st row and 1st column
colombia_data[1, 1]
# get the value in the 1st row and 6th column
colombia_data[1, 6]
# get the entire 1st column as a vector
colombia_data[, 1]
# get the first 3 values from the 7th column
colombia_data[1:3, 7]
# get the entire 3rd row as a data frame
colombia_data[3, ]
# get the first 6 rows (just like the head() function)
head_colombia <- colombia_data[1:6, ]
# all columns except the first one
colombia_data[, -1]
# similar to head(colombia), keeps only rows 1 to 6
colombia_data[-(7:34786), ]
# get the "value" column as a vector
colombia_data[, "dengue_total"]
# this does the same thing
colombia_data$dengue_total
# get the "Country" and "value" columns for the first three rows
# (this mixes row numbers with column names)
colombia_data[1:3, c("Year", "dengue_total")]
# get all the records where Year is 2007
colombia_data[colombia_data$Year == 2007, ]
# save those records into a new data frame
year_2007_data <- colombia_data[colombia_data$Year == 2007, ]
# count how many records are from the year 2007
nrow(year_2007_data)
# 1. Get the 200th row
data_200 <- colombia_data[200, ]
# 2. Use nrow() to get total number of rows
n_rows <- nrow(colombia_data)
# Extract last row using total number of rows
data_last <- colombia_data[n_rows, ]
# Optional: verify it looks correct
tail(colombia_data)
# 3. Get the middle row
data_middle <- colombia_data[n_rows/2, ]
# 4. Keep only the first 6 rows (remove rows 7 to the end)
data_head <- colombia_data[-(7:n_rows), ]
colombia_data$T_res <- factor(colombia_data$T_res)
summary(colombia_data$T_res)
sex <- factor(c("male", "female", "female", "male"))
levels(sex)
nlevels(sex)
sex # current order
sex <- factor(sex, levels = c("male", "female"))
sex # after re-ordering
as.character(sex)
year_fct <- factor(c(1990, 1983, 1977, 1998, 1990))
as.numeric(year_fct)               # Wrong! And there is no warning...
as.numeric(as.character(year_fct)) # Works...
as.numeric(levels(year_fct))[year_fct]    # The recommended way.
colombia_selected <- colombia_data[,c("calendar_start_date", "calendar_end_date", "Year", "dengue_total")]
# find all column names except the ones to remove
columns_to_keep <- setdiff(names(colombia_data), c("UUID", "IBGE_code"))
# subset the data frame
colombia_fewer_columns <- colombia_data[ , columns_to_keep]
colombia_2010 <- colombia_data[colombia_data$Year >= 2010, ]
colombia_filtered <- colombia_data[colombia_data$Year >= 2010 & colombia_data$T_res == "Year", ]
# Check which values are missing in 'dengue_total'
is.na(colombia_data$dengue_total)
# Check which values are NOT missing
!is.na(colombia_data$dengue_total)
# Keep only rows where dengue_total is not missing
colombia_clean <- colombia_data[!is.na(colombia_data$dengue_total), ]
colombia_clean2 <- colombia_data[!is.na(colombia_data$dengue_total) & !is.na(colombia_data$calendar_start_date), ]
colombia_data$dengue_per_1000 <- colombia_data$dengue_total / 1000
colombia_data$dengue_per_1000_x2 <- colombia_data$dengue_per_1000 * 2
# Sort the dataframe by dengue_total in ascending order
colombia_sorted <- colombia_data[order(colombia_data$dengue_total), ]
# Sort the dataframe by dengue_total in descending order
colombia_sorted_desc <- colombia_data[order(-colombia_data$dengue_total), ]
# Sort by dengue_total (ascending), and then by Year (descending)
colombia_sorted_multi <- colombia_data[order(colombia_data$dengue_total, -colombia_data$Year), ]
# Calculate the average number of dengue cases
mean(colombia_data$dengue_total, na.rm = TRUE)
# Count the number of observations for each value of T_res
table(colombia_data$T_res)
# Count the number of observations for each combination of T_res and S_res
table(colombia_data$T_res, colombia_data$full_name)
colombia_data <- read.csv("National-level data_COLOMBIA_20021229_20221231.csv")
