[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to RStudio for Public Health",
    "section": "",
    "text": "R is one of the leading programming languages in Data Science and Public Health Research. It is widely used to perform statistics, machine learning, visualizations, and data analyses. It is an open-source programming language, meaning all the software we will use in the course is free.\nThis course is designed as an introduction to R and RStudio for participants with no prior programming experience. We will start from scratch by introducing how to start programming in R, read and write data, manipulate data, and visualize data by creating different plots — covering all the fundamental tasks needed to begin analyzing your own data.\nWe will use RStudio, a powerful and user-friendly interface that makes developing R code much easier. During the course, we will also introduce you to the tidyverse, a collection of essential R packages including dplyr and ggplot2 that simplify data manipulation and visualization.",
    "crumbs": [
      "Home",
      "Description",
      "Introduction to RStudio for Public Health"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#if-you-already-have-r-and-rstudio-installed",
    "href": "index.html#if-you-already-have-r-and-rstudio-installed",
    "title": "Introduction to RStudio for Public Health",
    "section": "If you already have R and RStudio installed",
    "text": "If you already have R and RStudio installed\n\nOpen RStudio, click Help &gt; Check for Updates. Update if necessary.\nTo check your R version, start RStudio and type sessionInfo().\nYou can also check the latest version on the CRAN website and RStudio download page.",
    "crumbs": [
      "Home",
      "Description",
      "Introduction to RStudio for Public Health"
    ]
  },
  {
    "objectID": "index.html#if-you-dont-have-r-and-rstudio-installed",
    "href": "index.html#if-you-dont-have-r-and-rstudio-installed",
    "title": "Introduction to RStudio for Public Health",
    "section": "If you don’t have R and RStudio installed",
    "text": "If you don’t have R and RStudio installed\n\nDownload R from CRAN.\nInstall the downloaded .exe file.\nDownload RStudio from the RStudio download page.\nChoose RStudio x.yy.zzz - Windows Vista/7/8/10.\nInstall RStudio and open it to check it runs correctly.",
    "crumbs": [
      "Home",
      "Description",
      "Introduction to RStudio for Public Health"
    ]
  },
  {
    "objectID": "index.html#if-you-already-have-r-and-rstudio-installed-1",
    "href": "index.html#if-you-already-have-r-and-rstudio-installed-1",
    "title": "Introduction to RStudio for Public Health",
    "section": "If you already have R and RStudio installed",
    "text": "If you already have R and RStudio installed\n\nOpen RStudio, click Help &gt; Check for Updates.\nStart RStudio and type sessionInfo() to check your R version.\nVerify your version against CRAN.",
    "crumbs": [
      "Home",
      "Description",
      "Introduction to RStudio for Public Health"
    ]
  },
  {
    "objectID": "index.html#if-you-dont-have-r-and-rstudio-installed-1",
    "href": "index.html#if-you-dont-have-r-and-rstudio-installed-1",
    "title": "Introduction to RStudio for Public Health",
    "section": "If you don’t have R and RStudio installed",
    "text": "If you don’t have R and RStudio installed\n\nDownload R from CRAN.\nInstall the .pkg file.\nInstall XQuartz if prompted.\nDownload RStudio from the RStudio download page.\nChoose RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit).\nInstall and test RStudio.",
    "crumbs": [
      "Home",
      "Description",
      "Introduction to RStudio for Public Health"
    ]
  },
  {
    "objectID": "index.html#windows",
    "href": "index.html#windows",
    "title": "Introduction to RStudio for Public Health",
    "section": "Windows",
    "text": "Windows\n\nIf you already have R and RStudio installed\n\nOpen RStudio, click Help &gt; Check for Updates. Update if necessary.\nTo check your R version, start RStudio and type sessionInfo().\nYou can also check the latest version on the CRAN website and RStudio download page.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from CRAN.\nInstall the downloaded .exe file.\nDownload RStudio from the RStudio download page.\nChoose RStudio x.yy.zzz - Windows Vista/7/8/10.\nInstall RStudio and open it to check it runs correctly.",
    "crumbs": [
      "Home",
      "Description",
      "Introduction to RStudio for Public Health"
    ]
  },
  {
    "objectID": "index.html#macos",
    "href": "index.html#macos",
    "title": "Introduction to RStudio for Public Health",
    "section": "macOS",
    "text": "macOS\n\nIf you already have R and RStudio installed\n\nOpen RStudio, click Help &gt; Check for Updates.\nStart RStudio and type sessionInfo() to check your R version.\nVerify your version against CRAN.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from CRAN.\nInstall the .pkg file.\nInstall XQuartz if prompted.\nDownload RStudio from the RStudio download page.\nChoose RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit).\nInstall and test RStudio.",
    "crumbs": [
      "Home",
      "Description",
      "Introduction to RStudio for Public Health"
    ]
  },
  {
    "objectID": "index.html#linux",
    "href": "index.html#linux",
    "title": "Introduction to RStudio for Public Health",
    "section": "Linux",
    "text": "Linux\n\nFollow Linux distribution instructions from CRAN.\nFor Ubuntu/Debian: Install R via sudo apt-get install r-base.\nDownload RStudio from the RStudio download page.\nInstall using: sudo dpkg -i rstudio-x.yy.zzz-amd64.deb.\nOpen RStudio to verify it works.\n\nAdditionally, you will need to install the ggplot2 package. Details are provided in the setup section.",
    "crumbs": [
      "Home",
      "Description",
      "Introduction to RStudio for Public Health"
    ]
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "R is a free software environment for statistical computing, data visualization, and data analysis. It is widely used in academic research, public health, and industry. It allows you to work with data and create plots, statistical models, and even simulations.\n\n\n\n\n\nThe learning curve might be steeper than with other software, but with R, the results of your analysis do not rely on remembering a succession of pointing and clicking, but instead on a series of written commands, and that’s a good thing!\nSo, if you want to redo your analysis because you collected more data, you don’t have to remember which button you clicked in which order to obtain your results; you just have to run your script again.\nWorking with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes.\nWorking with scripts also forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use.\n\n\nReproducibility is when someone else (including your future self) can obtain the same results from the same dataset when using the same analysis.\nR integrates with other tools to generate reports from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript are updated automatically after running the code again.\nAn increasing number of journals and funding agencies expect analyses to be reproducible, so knowing R will give you an edge with these requirements.\n\n\n\nWith 10,000+ packages that can be installed to extend its capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyze your data.\nFor instance, R has packages for image analysis, GIS, time series, population genetics, and a lot more.\n\n\n\nThe skills you learn with R scale easily with the size of your dataset. Whether your dataset has hundreds or millions of lines, it won’t make much difference to you.\nR is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient.\nR can connect to spreadsheets, databases, and many other data formats, on your computer or on the web.\n\n\n\nThe plotting functionalities in R are endless, and allow you to adjust any aspect of your graph to convey most effectively the message from your data.\n\n\n\nThousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow, or on the RStudio Community.\n\n\n\nAnyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs."
  },
  {
    "objectID": "getting_started.html#r-does-not-involve-lots-of-pointing-and-clicking",
    "href": "getting_started.html#r-does-not-involve-lots-of-pointing-and-clicking",
    "title": "Getting Started",
    "section": "",
    "text": "The learning curve might be steeper than with other software, but with R, the results of your analysis do not rely on remembering a succession of pointing and clicking, but instead on a series of written commands, and that’s a good thing!\nSo, if you want to redo your analysis because you collected more data, you don’t have to remember which button you clicked in which order to obtain your results; you just have to run your script again.\nWorking with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes.\nWorking with scripts also forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use.\n\n\nReproducibility is when someone else (including your future self) can obtain the same results from the same dataset when using the same analysis.\nR integrates with other tools to generate reports from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript are updated automatically after running the code again.\nAn increasing number of journals and funding agencies expect analyses to be reproducible, so knowing R will give you an edge with these requirements.\n\n\n\nWith 10,000+ packages that can be installed to extend its capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyze your data.\nFor instance, R has packages for image analysis, GIS, time series, population genetics, and a lot more.\n\n\n\nThe skills you learn with R scale easily with the size of your dataset. Whether your dataset has hundreds or millions of lines, it won’t make much difference to you.\nR is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient.\nR can connect to spreadsheets, databases, and many other data formats, on your computer or on the web.\n\n\n\nThe plotting functionalities in R are endless, and allow you to adjust any aspect of your graph to convey most effectively the message from your data.\n\n\n\nThousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow, or on the RStudio Community.\n\n\n\nAnyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs."
  },
  {
    "objectID": "getting_started.html#create-an-r-project",
    "href": "getting_started.html#create-an-r-project",
    "title": "Getting Started",
    "section": "Create an R Project",
    "text": "Create an R Project\nBefore starting to write code in RStudio, we need to create an R Project. An R Project is a workspace where you can keep all files and settings associated with a project. It makes resuming work easier.\nTo create an “R Project”:\n\nStart RStudio.\nUnder the File menu, click New Project. Choose New Directory, then New Project.\nEnter a name and choose a convenient location. This will be your working directory.\nClick on Create Project.\n(Optional) Set preferences to “Never” save workspace in RStudio.\n\nRStudio’s default preferences generally work well, but saving a workspace to .RData can be cumbersome, especially if you are working with larger datasets as this would save all the data that is loaded into R into the .RData file.\nTo turn it off, go to: Tools → Global Options → General and select the ‘Never’ option for Save workspace to .RData on exit."
  },
  {
    "objectID": "getting_started.html#working-directory",
    "href": "getting_started.html#working-directory",
    "title": "Getting Started",
    "section": "Working directory",
    "text": "Working directory\nWhenever we are working on a project, it is good practice to keep a set of related data, analyses, and text self-contained in a single folder, called the working directory.\nUsing a consistent folder structure across your projects will help keep things organized, and will also make it easy to find things in the future. This can be especially helpful when you have multiple projects. In general, you may create directories (folders) for scripts, data, and documents.\n\ndata/\nUse this folder to store your raw data. For the sake of transparency and provenance, you should always keep a copy of your raw data accessible and do as much of your data cleanup and preprocessing programmatically (i.e., with scripts, rather than manually).\nSeparating raw data from processed data is also a good idea. For example, you could have files data/raw/survey.plot1.txt and data/raw/survey.plot2.txt kept separate from a data_output/survey.csv file generated by the scripts/01.preprocess.survey.R script.\ndocuments/\nThis would be a place to keep documentation and other text documents.\nscripts/\nThis would be the location to keep your R scripts for different analyses or plotting.\n\nYou may want additional directories or subdirectories depending on your project needs, but these should form the backbone of your working directory."
  },
  {
    "objectID": "getting_started.html#example-of-a-working-directory-structure",
    "href": "getting_started.html#example-of-a-working-directory-structure",
    "title": "Getting Started",
    "section": "Example of a working directory structure",
    "text": "Example of a working directory structure\nFor this workshop, we will need a data/ folder to store our raw data, and we will use data_output/ for when we learn how to export data as CSV files, and fig_output/ folder for the figures that we will save.\n\nUnder the Files tab on the right of the screen, click on New Folder and create a folder named data within your newly created working directory (e.g., ~/my-first-project/data).\nRepeat these operations to create a data_output/ and a fig_output folder.\n\nWe are going to keep the script in the root of our working directory because we are only going to use one file and it will make things easier.\nYour working directory should now look like this:\nmy-first-project/\n\n├── data/\n\n├── data_output/\n\n├── fig_output/\n\n└── script.R"
  },
  {
    "objectID": "getting_started.html#absolute-vs-relative-paths",
    "href": "getting_started.html#absolute-vs-relative-paths",
    "title": "Getting Started",
    "section": "Absolute vs Relative paths",
    "text": "Absolute vs Relative paths\nThe working directory is an important concept to understand. It is the place from where R will be looking for and saving the files. When you write code for your project, it should refer to files in relation to the root of your working directory and only need files within this structure.\nAll of the scripts within this folder can then use relative paths to files in the working directory that indicate where inside the project a file is located (as opposed to absolute paths, which point to where a file is on a specific computer). Working this way makes it a lot easier to move your project around on your computer and share it with others without worrying about whether or not the underlying scripts will still work.\n\n\n\n\n\n\nAbsolute vs Relative paths examples\n\n\n\nRelative path: data/dataset1.txt\nAbsolute path: C:/Users/User1/Documents/R/my-first-project/data/dataset1.txt\n\n\nUsing RStudio projects makes it easy to organise your files in the project and ensures that your working directory is set properly. RStudio shows your current working directory at the top of your window."
  },
  {
    "objectID": "getting_started.html#checking-your-working-directory",
    "href": "getting_started.html#checking-your-working-directory",
    "title": "Getting Started",
    "section": "Checking your working directory",
    "text": "Checking your working directory\nAnother way to check your working directory is by typing getwd() in the console pane.\nIf for some reason your working directory is not what it should be, you can change it in the RStudio interface by navigating in the file browser where your working directory should be, and clicking on the blue gear icon More, and select Set As Working Directory.\nAlternatively, you can use setwd(\"/path/to/working/directory\") to reset your working directory (not recommended). However, your scripts should not include this line because it will fail on someone else’s computer."
  },
  {
    "objectID": "getting_started.html#interacting-with-r",
    "href": "getting_started.html#interacting-with-r",
    "title": "Getting Started",
    "section": "Interacting with R",
    "text": "Interacting with R\nThe basis of programming is that we write down instructions for the computer to follow, and then we tell the computer to follow those instructions. We write, or code, instructions in R because it is a common language that both the computer and we can understand. We call the instructions commands and we tell the computer to follow the instructions by executing (also called running) those commands.\nThere are two main ways of interacting with R:\n\nusing the console\nusing script files (plain text files that contain your code)\n\nThe console pane (bottom left in RStudio) is where commands typed in R are executed immediately. You can type commands directly into the console and press Enter to execute them — but they will be forgotten when you close the session.\nIt is better to type the commands we want in the script editor, and save the script. This way, there is a complete record of what we did, and anyone (including our future selves!) can easily replicate the results.\nRStudio allows you to execute commands directly from the script editor by using the keyboard shortcut:\n\nCtrl + Enter (on Mac: Cmd + Return)\n\nThe current line or all selected lines will be sent to the console and executed.\nYou can find more shortcuts in this RStudio cheatsheet about the RStudio IDE.\nTo check a variable or an object without saving it in your script, type the command directly in the console.\n\nCtrl + 1 and Ctrl + 2 can be used to jump between the script and console panes.\n\nWhen R is ready to accept a command, the console shows a &gt; prompt. After running a command, it will return to &gt; when ready.\nIf you see a + prompt, it means R is still waiting for you to finish the command (e.g., due to an unclosed parenthesis or quote). You can press Esc to cancel the incomplete command."
  },
  {
    "objectID": "getting_started.html#how-to-learn-more-after-the-workshop",
    "href": "getting_started.html#how-to-learn-more-after-the-workshop",
    "title": "Getting Started",
    "section": "How to learn more after the workshop?",
    "text": "How to learn more after the workshop?\nThe material we cover during this workshop will give you an initial taste of how you can use R to analyze data for your own research. However, you will need to learn more to do advanced operations such as cleaning your dataset, using statistical methods, or creating beautiful graphics.\nThe best way to become proficient and efficient at R, as with any other tool, is to use it to address your actual research questions.\nAs a beginner, it can feel daunting to write a script from scratch. Many people make their code available online, and modifying existing code to suit your purpose might make it easier for you to get started."
  },
  {
    "objectID": "getting_started.html#seeking-help",
    "href": "getting_started.html#seeking-help",
    "title": "Getting Started",
    "section": "Seeking help",
    "text": "Seeking help\nUse the built-in RStudio help interface to search for more information on R functions"
  },
  {
    "objectID": "intro_to_r.html",
    "href": "intro_to_r.html",
    "title": "Introduction to R Programming",
    "section": "",
    "text": "You can get output from R simply by typing math in the console:\n\n1 + 1 # addition\n\n[1] 2\n\n2 - 1 # deduction\n\n[1] 1\n\n12 / 7 # division\n\n[1] 1.714286\n\n2 * 2 # multiplication\n\n[1] 4\n\n2 ^ 2 # square \n\n[1] 4\n\n\nHowever, to do useful and interesting things, we need to assign values to objects. To create an object, we need to give it a name followed by the assignment operator &lt;-, and the value we want to give it:\n\nweight_kg &lt;- 55\n\n&lt;- is the assignment operator. It assigns values on the right to objects on the left. So, after executing x &lt;- 3, the value of x is 3. The arrow can be read as 3 goes into x.\nFor historical reasons, you can also use = for assignments, but not in every context. Because of the slight differences in syntax, it is good practice to always use &lt;- for assignments.\nIn RStudio, typing Alt + - (push Alt at the same time as the - key) will write &lt;- in a single keystroke on a PC, while typing Option + - (Option and - key) does the same in a Mac.\nObjects can be named like x, current_temperature, or subject_id.\n\nBe explicit and not too long\nNot start with a number (e.g., 2x is invalid, but x2 is)\nBe case-sensitive (e.g., weight_kg ≠ Weight_kg)\nAvoid using names of built-in functions like c, T, mean, data, or if (see here for a complete list). If in doubt, check the help to see if the name is already in use. It’s also best to avoid dots (.) within an object name as in my.dataset. Instead, use underscores (_).\nIt is also recommended to use nouns for object names, and verbs for function names.\nTo improve readability, use consistent naming conventions. CIn R, three popular style guides are Google’s, Jean Fan’s and the tidyverse’s.\nYou can install the lintr package to catch issues in your code style.\n\n\n\nWhat are known as objects in R are known as variables in many other programming languages. Depending on the context, object and variable can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg &lt;- 55    # doesn't print anything\n(weight_kg &lt;- 55)  # but putting parenthesis around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg          # and so does typing the name of the object\n\n[1] 55\n\n\nNow that R has weight_kg in memory, we can do arithmetic with it. For instance, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg):\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change an object’s value by assigning it a new one:\n\nweight_kg &lt;- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nThis means that assigning a value to one object does not change the values of other objects For example, let’s store the animal’s weight in pounds in a new object, weight_lb:\n\nweight_lb &lt;- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg &lt;- 100\n\nWhat do you think is the current content of the object weight_lb? 126.5 or 220?\n\n\n\nThe comment character in R is #, anything to the right of a # in a script will be ignored by R. It is useful to leave notes and explanations in your scripts. RStudio makes it easy to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard Ctrl + Shift + C. If you only want to comment out one line, you can put the cursor at any location of that line (i.e. no need to select the whole line), then press Ctrl + Shift + C.\n\n\n\nWhat are the values after each statement in the following?\n\nmass &lt;- 47.5      # mass?\nage &lt;- 122        # age?\nmass &lt;- mass * 2.0  # mass?\nage &lt;- age - 20     # age?\nmass_index &lt;- mass / age  # mass_index\n\n\n\n\n\n\n\nNote\n\n\n\n\nmass &lt;- 47.5         # mass is 47.5\nage &lt;- 122           # age is 122\nmass &lt;- mass * 2.0   # mass is 95\nage &lt;- age - 20      # age is 102\nmass_index &lt;- mass / age  # mass_index is 0.931"
  },
  {
    "objectID": "intro_to_r.html#creating-objects-in-r",
    "href": "intro_to_r.html#creating-objects-in-r",
    "title": "Introduction to R Programming",
    "section": "",
    "text": "You can get output from R simply by typing math in the console:\n\n1 + 1 # addition\n\n[1] 2\n\n2 - 1 # deduction\n\n[1] 1\n\n12 / 7 # division\n\n[1] 1.714286\n\n2 * 2 # multiplication\n\n[1] 4\n\n2 ^ 2 # square \n\n[1] 4\n\n\nHowever, to do useful and interesting things, we need to assign values to objects. To create an object, we need to give it a name followed by the assignment operator &lt;-, and the value we want to give it:\n\nweight_kg &lt;- 55\n\n&lt;- is the assignment operator. It assigns values on the right to objects on the left. So, after executing x &lt;- 3, the value of x is 3. The arrow can be read as 3 goes into x.\nFor historical reasons, you can also use = for assignments, but not in every context. Because of the slight differences in syntax, it is good practice to always use &lt;- for assignments.\nIn RStudio, typing Alt + - (push Alt at the same time as the - key) will write &lt;- in a single keystroke on a PC, while typing Option + - (Option and - key) does the same in a Mac.\nObjects can be named like x, current_temperature, or subject_id.\n\nBe explicit and not too long\nNot start with a number (e.g., 2x is invalid, but x2 is)\nBe case-sensitive (e.g., weight_kg ≠ Weight_kg)\nAvoid using names of built-in functions like c, T, mean, data, or if (see here for a complete list). If in doubt, check the help to see if the name is already in use. It’s also best to avoid dots (.) within an object name as in my.dataset. Instead, use underscores (_).\nIt is also recommended to use nouns for object names, and verbs for function names.\nTo improve readability, use consistent naming conventions. CIn R, three popular style guides are Google’s, Jean Fan’s and the tidyverse’s.\nYou can install the lintr package to catch issues in your code style.\n\n\n\nWhat are known as objects in R are known as variables in many other programming languages. Depending on the context, object and variable can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg &lt;- 55    # doesn't print anything\n(weight_kg &lt;- 55)  # but putting parenthesis around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg          # and so does typing the name of the object\n\n[1] 55\n\n\nNow that R has weight_kg in memory, we can do arithmetic with it. For instance, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg):\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change an object’s value by assigning it a new one:\n\nweight_kg &lt;- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nThis means that assigning a value to one object does not change the values of other objects For example, let’s store the animal’s weight in pounds in a new object, weight_lb:\n\nweight_lb &lt;- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg &lt;- 100\n\nWhat do you think is the current content of the object weight_lb? 126.5 or 220?\n\n\n\nThe comment character in R is #, anything to the right of a # in a script will be ignored by R. It is useful to leave notes and explanations in your scripts. RStudio makes it easy to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard Ctrl + Shift + C. If you only want to comment out one line, you can put the cursor at any location of that line (i.e. no need to select the whole line), then press Ctrl + Shift + C.\n\n\n\nWhat are the values after each statement in the following?\n\nmass &lt;- 47.5      # mass?\nage &lt;- 122        # age?\nmass &lt;- mass * 2.0  # mass?\nage &lt;- age - 20     # age?\nmass_index &lt;- mass / age  # mass_index\n\n\n\n\n\n\n\nNote\n\n\n\n\nmass &lt;- 47.5         # mass is 47.5\nage &lt;- 122           # age is 122\nmass &lt;- mass * 2.0   # mass is 95\nage &lt;- age - 20      # age is 102\nmass_index &lt;- mass / age  # mass_index is 0.931"
  }
]