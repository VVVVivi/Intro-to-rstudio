[
  {
    "objectID": "visualization.html",
    "href": "visualization.html",
    "title": "Visualization with ggplot2",
    "section": "",
    "text": "Hadley Wickham’s ggplot2 package is a powerful extension to R for creating graphics. It implements a “grammar of graphics,” which breaks the task of plotting into several manageable steps. For standard plots, you usually only need three main steps:\n\nInput your data using ggplot(),\nCall a geom_xxx() function to specify the type of plot (e.g., scatter, line, boxplot),\nOptionally adjust scales, legends, themes, etc.\n\nIf you want more control over the appearance of your plot, you can add layers such as scale, legends, or color options. You can start simple and progressively refine your plots.\n\nCompared to R’s base graphics system, ggplot2 produces more consistent and aesthetically pleasing outputs. It is particularly good when you need to combine different types of graphics or design custom visualizations.\n\nThe typical steps for building a plot with ggplot2 are:\n\nPrepare your data, typically in a data frame with each row as an observation and each column as a variable.\nUse ggplot() to specify your data and aesthetics.\nAdd a geometric object using geom_xxx() to define the type of plot.\nOptionally refine with:\n\nCoordinate systems (e.g., coord_cartesian(), scale_x_log10()),\nScales and themes,\nTitles and labels via labs().\n\n\nA general formula to build a ggplot2 figure might look like this:\n\n\n\n\n\n\n&lt;...&gt; indicates optional parameters.\nThe variable p stores all the data and settings for the plot and can be named arbitrarily.\nVariable names like &lt;data_frame&gt; and &lt;var_x&gt; are placeholders you would replace with real column or data names.\n\nBefore we start, please ensure you have installed ggplot2 package:\n\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\n\n\n\nThis chapter draws from the following key sources:\n\nHealy, Kieran (2018). Data Visualization: A Practical Introduction. Princeton University Press.\nhttps://socviz.co/index.html\nThis book explains the use of ggplot in R and also covers some general principles of data visualization.\nClaus O. Wilke (2019). Fundamentals of Data Visualization. O’Reilly Media.\nhttps://serialmentor.com/dataviz\nThis book also uses R’s ggplot2 package, but the main text does not include code. It primarily discusses considerations when choosing chart types and how to combine different plot elements. Code is available for download on GitHub.\nWinston Chang (2018). R Graphics Cookbook. O’Reilly Media.\nWebsite: https://r-graphics.org\nThis is the second edition, which discusses various types of R plots.\nWickham, Hadley (2016). ggplot2: Elegant Graphics for Data Analysis. New York: Springer.\nRStudio’s ggplot2 overview:\nhttps://ggplot2.tidyverse.org/articles/ggplot2-specs.html\n\n\n\n\nThe following datasets will be used in the upcoming examples:\n\nThe gapminder dataset from the gapminder package contains data across different years for dozens of countries, including continent, life expectancy, population, and per capita GDP. It includes 1704 observations and 6 variables.\nThe gss_sm dataset from the socviz package includes part of the General Social Survey (GSS) data from the United States in 2016. It has 2867 observations and 32 variables. The variables mainly represent categorical attributes in social surveys, such as binary classification, ordinal classification, grouped numeric values, and integer values.\nThe midwest dataset from the ggplot2 package contains statistical data on counties in the Midwestern United States, such as land area.\n\n\ngapminder dataset:\n\n# install.packages(\"gapminder\")\nlibrary(gapminder)\n\nWarning: package 'gapminder' was built under R version 4.4.3\n\nhead(gapminder, 20)\n\n# A tibble: 20 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n11 Afghanistan Asia       2002    42.1 25268405      727.\n12 Afghanistan Asia       2007    43.8 31889923      975.\n13 Albania     Europe     1952    55.2  1282697     1601.\n14 Albania     Europe     1957    59.3  1476505     1942.\n15 Albania     Europe     1962    64.8  1728137     2313.\n16 Albania     Europe     1967    66.2  1984060     2760.\n17 Albania     Europe     1972    67.7  2263554     3313.\n18 Albania     Europe     1977    68.9  2509048     3533.\n19 Albania     Europe     1982    70.4  2780097     3631.\n20 Albania     Europe     1987    72    3075321     3739.\n\n\ngss_sm dataset:\n\n# install.packages(\"socviz\")\nlibrary(socviz)\n\nWarning: package 'socviz' was built under R version 4.4.3\n\nhead(gss_sm, 20)\n\n# A tibble: 20 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n11  2016    11 2             33      5 4      High … Black Fema… Middl… under $…\n12  2016    12 1             86      4 4      High … White Fema… Middl… under $…\n13  2016    13 2             32      3 3      High … Black Male  Middl… $8 000 …\n14  2016    14 3             60      5 6      High … Black Fema… Middl… $12500 …\n15  2016    15 2             76      7 0      Lt Hi… White Male  New E… $40000 …\n16  2016    16 3             33      2 1      High … White Fema… New E… $50000 …\n17  2016    17 3             56      6 3      High … White Male  New E… $50000 …\n18  2016    18 2             62      5 8      Lt Hi… Other Fema… New E… $5 000 …\n19  2016    19 2             31      0 2      Gradu… Black Male  New E… $35000 …\n20  2016    20 1             43      2 0      High … Black Male  New E… $25000 …\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "visualization.html#references-and-further-reading",
    "href": "visualization.html#references-and-further-reading",
    "title": "Visualization with ggplot2",
    "section": "",
    "text": "This chapter draws from the following key sources:\n\nHealy, Kieran (2018). Data Visualization: A Practical Introduction. Princeton University Press.\nhttps://socviz.co/index.html\nThis book explains the use of ggplot in R and also covers some general principles of data visualization.\nClaus O. Wilke (2019). Fundamentals of Data Visualization. O’Reilly Media.\nhttps://serialmentor.com/dataviz\nThis book also uses R’s ggplot2 package, but the main text does not include code. It primarily discusses considerations when choosing chart types and how to combine different plot elements. Code is available for download on GitHub.\nWinston Chang (2018). R Graphics Cookbook. O’Reilly Media.\nWebsite: https://r-graphics.org\nThis is the second edition, which discusses various types of R plots.\nWickham, Hadley (2016). ggplot2: Elegant Graphics for Data Analysis. New York: Springer.\nRStudio’s ggplot2 overview:\nhttps://ggplot2.tidyverse.org/articles/ggplot2-specs.html"
  },
  {
    "objectID": "visualization.html#datasets-used-in-later-examples",
    "href": "visualization.html#datasets-used-in-later-examples",
    "title": "Visualization with ggplot2",
    "section": "",
    "text": "The following datasets will be used in the upcoming examples:\n\nThe gapminder dataset from the gapminder package contains data across different years for dozens of countries, including continent, life expectancy, population, and per capita GDP. It includes 1704 observations and 6 variables.\nThe gss_sm dataset from the socviz package includes part of the General Social Survey (GSS) data from the United States in 2016. It has 2867 observations and 32 variables. The variables mainly represent categorical attributes in social surveys, such as binary classification, ordinal classification, grouped numeric values, and integer values.\nThe midwest dataset from the ggplot2 package contains statistical data on counties in the Midwestern United States, such as land area.\n\n\ngapminder dataset:\n\n# install.packages(\"gapminder\")\nlibrary(gapminder)\n\nWarning: package 'gapminder' was built under R version 4.4.3\n\nhead(gapminder, 20)\n\n# A tibble: 20 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n11 Afghanistan Asia       2002    42.1 25268405      727.\n12 Afghanistan Asia       2007    43.8 31889923      975.\n13 Albania     Europe     1952    55.2  1282697     1601.\n14 Albania     Europe     1957    59.3  1476505     1942.\n15 Albania     Europe     1962    64.8  1728137     2313.\n16 Albania     Europe     1967    66.2  1984060     2760.\n17 Albania     Europe     1972    67.7  2263554     3313.\n18 Albania     Europe     1977    68.9  2509048     3533.\n19 Albania     Europe     1982    70.4  2780097     3631.\n20 Albania     Europe     1987    72    3075321     3739.\n\n\ngss_sm dataset:\n\n# install.packages(\"socviz\")\nlibrary(socviz)\n\nWarning: package 'socviz' was built under R version 4.4.3\n\nhead(gss_sm, 20)\n\n# A tibble: 20 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n11  2016    11 2             33      5 4      High … Black Fema… Middl… under $…\n12  2016    12 1             86      4 4      High … White Fema… Middl… under $…\n13  2016    13 2             32      3 3      High … Black Male  Middl… $8 000 …\n14  2016    14 3             60      5 6      High … Black Fema… Middl… $12500 …\n15  2016    15 2             76      7 0      Lt Hi… White Male  New E… $40000 …\n16  2016    16 3             33      2 1      High … White Fema… New E… $50000 …\n17  2016    17 3             56      6 3      High … White Male  New E… $50000 …\n18  2016    18 2             62      5 8      Lt Hi… Other Fema… New E… $5 000 …\n19  2016    19 2             31      0 2      Gradu… Black Male  New E… $35000 …\n20  2016    20 1             43      2 0      High … Black Male  New E… $25000 …\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "visualization.html#basic-scatter-plot",
    "href": "visualization.html#basic-scatter-plot",
    "title": "Visualization with ggplot2",
    "section": "Basic Scatter Plot",
    "text": "Basic Scatter Plot\nUsing the gapminder dataset as an example, we’ll create a basic scatter plot and progressively improve it. This dataset contains data from multiple countries over multiple years, including life expectancy and GDP per capita. In a scatter plot, each point represents one year of data for one country. The most important components of a scatter plot are how the data are mapped to the x- and y-axes.\nFirst, call the ggplot() function and specify the dataset, mapping GDP per capita to the x-axis and life expectancy to the y-axis. The result is stored in an R object:\n\np &lt;- ggplot(data = gapminder,\n  mapping = aes(\n    x = gdpPercap,\n    y = lifeExp))\n\nThe x and y axes are the most common aesthetics, but you can also map variables to color, shape, or line type. At this stage, you don’t need to specify actual colors or symbols — just map the variables to these graphical features.\nIn the call to ggplot(), the data =, mapping =, x =, and y = parts can be omitted for brevity. The same plot can be written as:\n\np &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp))\n\nOnce the data and aesthetics are defined, you can create the plot by adding a geom_xxx() layer to specify the geometry type. Combine this with the result of ggplot() using a plus sign (+), like:\n\np + geom_point()\n\n\n\n\n\n\n\n\nIn fact, the code above is equivalent to calling print(p + geom_point()). In R functions or loops, you need to explicitly use print() — otherwise the result will not be shown.\nTo call print() explicitly, you can rewrite the code like this:\n\np1 &lt;- p + geom_point()\nprint(p1)"
  },
  {
    "objectID": "visualization.html#step-by-step-improvement",
    "href": "visualization.html#step-by-step-improvement",
    "title": "Visualization with ggplot2",
    "section": "Step-by-Step Improvement",
    "text": "Step-by-Step Improvement\nBy specifying a dataset, defining the aesthetic mappings, and choosing the appropriate geometry type, you can construct a basic plot. You can then improve the chart step by step by adjusting the coordinate system, axis labels, titles, legends, and color themes. In fact, the ggplot2 package already provides reasonable defaults, and users often only need to make small modifications.\nThe steps of building a plot are connected using the + operator — a unique syntax of ggplot2. For example, to add a fitted curve using the same mappings:\n\np + geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nTo overlay a scatter plot and a fitted curve using the same mappings:\n\np + geom_point() + \n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nBy default, geom_smooth() uses the gam() function to calculate the smoothed curve. You can specify different fitting methods using arguments in geom_smooth(), such as a linear model:\n\np + geom_point() + \n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nNote: The variables needed by the geom_xxx() functions are extracted from the object p created by the ggplot() function.\nIn all the charts above, the x-axis variable (GDP per capita) is highly skewed with a long right tail, which causes most points to be compressed into the lower-left corner of the chart. You can improve the x-axis scale by applying a logarithmic transformation using the function scale_x_log10():\n\np + geom_point() +\n  geom_smooth(method = \"gam\") +\n  scale_x_log10()\n\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nIn general, the fitted curve from a generalized additive model (GAM) is essentially a smoothed line. Note that when you apply a scale transformation, such as scale_x_log10(), the transformation is applied to the original data. However, the fitting in geom_smooth() happens after the transformation.\nIn the previous chart, the formatting of the x-axis tick labels could be improved. You can do this by using the appropriate label formatting function from the scales package and passing it to the labels argument of scale_x_log10():\n\np + geom_point() +\n  geom_smooth(method = \"gam\") +\n  scale_x_log10(labels = scales::dollar)\n\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nThe labels argument of scale_xxx() functions determines how tick mark numbers are displayed on the axis. The argument value should be a function. If the scales package doesn’t offer a suitable one, you can define your own function to convert numeric values into strings.\nThe scales package provides label formatting functions for: comma, date, dollar, math, number, ordinal, pvalue, scientific, time, and more."
  },
  {
    "objectID": "visualization.html#color-shape-and-linetype-mapping",
    "href": "visualization.html#color-shape-and-linetype-mapping",
    "title": "Visualization with ggplot2",
    "section": "Color, Shape, and Linetype Mapping",
    "text": "Color, Shape, and Linetype Mapping\nIn the ggplot() function, the mapping argument within aes() is used to map variables to the x-axis, y-axis, color, shape, linetype, etc. These graphical element types can also be fixed as constants outside of aes().\nFor example, to use different colors to represent different continents, we map the continent variable to color:\n\np &lt;- ggplot(gapminder, aes(\n  x = gdpPercap,\n  y = lifeExp,\n  color = continent))\n\nThis code only maps continent to color, without specifying what the colors should be.\nHere is a scatter plot with multiple smooth lines:\n\np + geom_point() +\n  geom_smooth(method=\"loess\") +\n  scale_x_log10(labels=scales::dollar)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nYou can see that different continents have different colored dots, and each of the five continents has a fitted curve. However, some of the curves have different colors but visually similar hues, making it difficult to read. The legend on the right automatically generates a mapping between continent and color.\nThe following plot shows how to assign both point color and fill color for shaded areas using continent, by specifying both color and fill in aes():\n\np &lt;- ggplot(gapminder, mapping = aes(\n  x = gdpPercap,\n  y = lifeExp,\n  color = continent,\n  fill = continent))\n\np + geom_point() +\n  geom_smooth(method=\"loess\") +\n  scale_x_log10(labels=scales::dollar)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nTo specify a fixed color, try this:\n\np &lt;- ggplot(gapminder, aes(\n  x = gdpPercap,\n  y = lifeExp,\n  color = \"chartreuse4\"))\n\np + geom_point() +\n  geom_smooth(method=\"loess\") +\n  scale_x_log10(labels=scales::dollar)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWe see that the scatter plot does not use chartreuse color, and the legend has an entry labeled \"chartreuse4\". This is because aes() only maps variables, so \"chartreuse4\" is treated as a new variable. To use a constant color, you should set color = outside of aes(), like this:\n\np &lt;- ggplot(gapminder, aes(\n  x = gdpPercap,\n  y = lifeExp))\n\np + geom_point(color=\"chartreuse4\") +\n  geom_smooth(method=\"loess\") +\n  scale_x_log10(labels=scales::dollar)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe geom_xxx() function accepts many arguments related to color, transparency, shape, linetype, etc. For example, the code below sets the point transparency and line appearance:\n\np + geom_point(alpha=0.5) +\n  geom_smooth(method=\"lm\", color=\"cadetblue1\", se = FALSE, size = 4, alpha = 0.3) +\n  scale_x_log10(labels=scales::dollar)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nHere, size sets the line thickness in mm, se = FALSE disables confidence intervals, and alpha sets transparency (0 to 1). Using transparency helps when many points overlap, as more overlap appears darker. You can also map transparency using aes(alpha = variable).\nYou can use the linetype argument to set line styles: 0 = solid line, 1–6 = dashed/dotted variations.\nTo add proper titles, use labs():\n\np &lt;- ggplot(gapminder, aes(\n  x = gdpPercap,\n  y = lifeExp)) \np + geom_point(alpha = 0.3) +\n  geom_smooth(method=\"gam\") +\n  scale_x_log10(labels=scales::dollar) +\n  labs(\n    x = \"GDP per capita\",\n    y = \"Life expectancy (years)\",\n    title = \"Relationship between Economy and Life Expectancy\",\n    subtitle = \"Each dot represents a country-year\",\n    caption = \"Data source: gapminder\"\n  )\n\n\n\n\n\n\n\n\nAs you can see, labs() sets the main title, subtitle, axis labels, and bottom-right caption. Axis tick label formatting (e.g., for numeric scale) must be done using the scale_xxx() function."
  },
  {
    "objectID": "visualization.html#mapping-variables-within-geom-functions",
    "href": "visualization.html#mapping-variables-within-geom-functions",
    "title": "Visualization with ggplot2",
    "section": "Mapping Variables within geom Functions",
    "text": "Mapping Variables within geom Functions\nIn the previous example, both color and fill were mapped to the variable continent in the ggplot() function. This made the scatter plot points colored by continent and also resulted in separate smooth curves for each continent. But what if we want a single smooth curve for all continents?\nIf needed, you can specify aesthetic mappings individually within a geom_xxx() function using mapping = aes(...). For example, the following code does not map continent to point color, but still allows geom_smooth() to show a unified curve:\n\np &lt;- ggplot(gapminder, aes(\n  x = gdpPercap,\n  y = lifeExp))\n\np + geom_point(mapping = aes(color = continent)) +\n  geom_smooth(method = \"loess\") +\n  scale_x_log10(labels = scales::dollar)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nYou can also map a categorical variable to shape. For instance, filtering the 2007 data and mapping continent to shape:\n\np &lt;- ggplot(\n  data = gapminder[which(gapminder$year == 2007),],\n  mapping = aes(\n    x = gdpPercap,\n    y = lifeExp,\n    shape = continent))\n\np + geom_point(alpha = 0.4, size = 4) +\n  scale_x_log10(labels = scales::dollar)\n\n\n\n\n\n\n\n\nThis mapping is useful only when the number of points is relatively small. You can also use the size parameter to set symbol size (in mm). If multiple points share the same shape, you’ll need to manually assign shapes via shape = in geom_point(). You can use integer codes (0–25) or character names like \"circle\" for common symbols. See the ggplot2-specs vignette for details.\nNote: Mapping a categorical variable will automatically group the data. color and fill mappings will typically imply a group aesthetic internally. However, for clarity, you may still need to map group explicitly."
  },
  {
    "objectID": "visualization.html#continuous-variable-color-mapping",
    "href": "visualization.html#continuous-variable-color-mapping",
    "title": "Visualization with ggplot2",
    "section": "Continuous Variable Color Mapping",
    "text": "Continuous Variable Color Mapping\nYou can also map a continuous variable to a color gradient. While this is uncommon for 2D function contour plots, it can sometimes reduce readability.\nFor example, mapping the logarithm of population size to a color gradient:\n\np &lt;- ggplot(gapminder, aes(\n  x = gdpPercap,\n  y = lifeExp,\n  color = log(pop)))\n\np + geom_point() +\n  geom_smooth(method = \"loess\") +\n  scale_x_log10(labels = scales::dollar)"
  },
  {
    "objectID": "visualization.html#saving-plots",
    "href": "visualization.html#saving-plots",
    "title": "Visualization with ggplot2",
    "section": "Saving Plots",
    "text": "Saving Plots\nWhen using RMarkdown to create documents, plots will automatically be embedded in the output (PDF, Word, HTML, etc.). However, for standalone export, you can use the following commands.\nTo save the most recently generated plot as a PNG file:\n\nggsave(filename = \"filename.png\")\n\nTo save as a PDF:\n\nggsave(filename = \"filename.pdf\")\n\nYou can also save a plot stored in a variable:\n\nggout01 &lt;- p + geom_point()\nggsave(filename = \"filename.pdf\", plot = ggout01)\n\nYou can specify size and scale using:\n\nggsave(filename = \"filename.pdf\", plot = ggout01,\n       height = 12, width = 8, units = \"cm\")\n\nUnits can be specified as \"in\", \"cm\", or \"mm\"."
  },
  {
    "objectID": "visualization.html#grouping-in-plots-and-line-charts",
    "href": "visualization.html#grouping-in-plots-and-line-charts",
    "title": "Visualization with ggplot2",
    "section": "Grouping in Plots and Line Charts",
    "text": "Grouping in Plots and Line Charts\nWhen using the gapminder dataset to analyze the change in life expectancy over time (in years) for each country, you can use geom_line() to draw line plots. However, due to the large number of countries, simply specifying the x and y variables is not sufficient to produce meaningful plots, as shown below:\n\np &lt;- ggplot(gapminder, aes(\n  x = year,\n  y = lifeExp)) +\n  geom_line()\n\nThis does not produce the desired result of having one line per country, because the code does not specify grouping by country. Instead, the coordinates for all countries in the same year are connected by one line.\nNote that geom_line() connects points in order of increasing x-coordinate. If you want to connect points by their row order, use geom_path() instead.\nTo fix this, you must specify grouping by country using the group aesthetic. Grouping works similarly to how x, y, color, or fill map variables. Here’s the corrected version:\n\np &lt;- ggplot(gapminder, aes(\n  x = year,\n  y = lifeExp,\n  group = country)) +\n  geom_line()\n\nEach line now corresponds to a country. To find out which country has the lowest and most erratic life expectancy trend, you can use filter():\n\ngapminder[which(gapminder$lifeExp &lt; 30 & gapminder$year &gt;= 1990),]\n\n# A tibble: 1 × 6\n  country continent  year lifeExp     pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n1 Rwanda  Africa     1992    23.6 7290203      737.\n\n\nThe country is Rwanda.\nTo group by two or more categorical variables, use interaction(...). For example, to draw a line plot of life expectancy in Rwanda:\n\nggplot(gapminder[which(gapminder$country == \"Rwanda\"),], \n       aes(x = year,\n           y = lifeExp)) +\n  geom_line()\n\n\n\n\n\n\n\n\nIn the above example, we filtered dataset as the first argument to ggplot(), and then further plotting layers can be added.\nIf you want to add scatter points to each observation, use geom_point() together:\n\nggplot(gapminder[which(gapminder$country == \"Rwanda\"),], \n       aes(\n          x = year,\n          y = lifeExp)) +\n  geom_line()+\n  geom_point()\n\n\n\n\n\n\n\n\nNote: The y-axis in such plots should start at 0 so that the filled area is proportional to the value. This is the default in ggplot2.\nAnother issue: If the x-axis is not numeric but a factor or string, the line segments will not connect.\no control color, line type, or line thickness in geom_line(), use the arguments color, linetype, and size. Line types include:\n\n0: no line\n1: solid\n2: dashed\n3: dotted\n4: dotdash\n5: longdash\n6: twodash"
  },
  {
    "objectID": "visualization.html#facets",
    "href": "visualization.html#facets",
    "title": "Visualization with ggplot2",
    "section": "Facets",
    "text": "Facets\nPreviously, the plots for all countries contained too many lines, making them cluttered. You can divide the plotting area into multiple small blocks called facets, which partition the data by one or two categorical variables. Each subset is plotted in a separate panel.\nThere are two types of facet functions:\n\nfacet_wrap() arranges the different plots into muliple rows and columns to cleanly fit on one page.\nfacet_grid() plots all the categories in 1 row or 1 column.\n\nFor the example above, we can place each continent’s graph in its own panel. Facets are not a type of aesthetic mapping but a way of laying out plots. Instead of setting facets inside aes(), we use the facet_wrap() function. For example:\n\nggplot(gapminder, aes(\n  x = year,\n  y = lifeExp,\n  group = country)) +\n  geom_line() +\n  facet_wrap(~ continent)\n\n\n\n\n\n\n\n\nTo adjust where facet titles appear (top or bottom), you can use facet_wrap()’s strip_position argument and switch option.\nBy default, all facets share the same x and y axes range. If they differ, readers may get confused. If you want independent scales, you can use the scales argument in facet_wrap(). Setting it to \"fixed\" (default) shares scales. \"free\" makes both x and y axes independent, \"free_x\" shares only y-axis, and \"free_y\" shares only x-axis.\nIn facet_wrap(), use ncol to set number of columns, nrow for number of rows. The order should match the categorical variable’s defined order.\nBelow is an example using facet_wrap() to show life expectancy trends in different continents, with improved axis titles and labels. Note that the group = country mapping must only be used in geom_line() and not in geom_smooth(), or the smoother will be drawn separately for each country:\n\nggplot(gapminder, aes(\n  x = year,\n  y = lifeExp)) +\n  geom_line(\n    mapping = aes(group = country),\n    color = \"gray70\") +\n  geom_smooth(\n    method = \"loess\",\n    color = \"cyan\",\n    se = FALSE,\n    size = 1.1) +\n  facet_wrap(~ continent, ncol = 2) +\n  labs(\n    x = \"Year\",\n    y = \"Life expectancy \",\n    title = \"Trends in life expectancy in each country across five continents\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nNote: the group = country mapping was moved from the ggplot() function into geom_line() to ensure smoothing is done at the continent level.\nThe facet_wrap() function is best for visualizing different values of a single categorical variable across panels. You can also specify number of rows and columns. For two variables, use facet_grid().\nFor example, using the gss_sm dataset, to plot a scatter of age vs. number of children:\n\np &lt;- ggplot(gss_sm, aes(\n  x = age,\n  y = childs)) +\n  geom_point(alpha = 0.2)\n\nTo split by both sex and race:\n\np + geom_point(alpha = 0.2) +\n  facet_grid(sex ~ race)\n\nWarning: Removed 18 rows containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 18 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nTo add a smoother within each facet panel:\n\np + geom_point(alpha = 0.2) +\n  geom_smooth() +\n  facet_grid(sex ~ race)\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 18 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 18 rows containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 18 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nAlthough there’s no group mapping here, because the dataset is divided into 6 subsets by sex and race, each facet only contains its own data."
  },
  {
    "objectID": "visualization.html#segmented-and-side-by-side-bar-charts",
    "href": "visualization.html#segmented-and-side-by-side-bar-charts",
    "title": "Visualization with ggplot2",
    "section": "Segmented and Side-by-Side Bar Charts",
    "text": "Segmented and Side-by-Side Bar Charts\nThe bar chart above shows the frequency distribution of a single categorical variable. To visualize the joint distribution of two categorical variables, you can use segmented bar charts or side-by-side bar charts.\nFor example, using the gss_sm dataset, you can first calculate the frequency by grouping based on bigregion, then within each group, calculate frequencies by religion, and compute the proportion of each religion within each bigregion. The plot after using tidyverse to compute the statistics is as follows:\n\n# Count frequency by bigregion and religion\ntab &lt;- table(gss_sm$bigregion, gss_sm$religion)\ndf3 &lt;- as.data.frame(tab)\nnames(df3) &lt;- c(\"bigregion\", \"religion\", \"n\")\n\n# Calculate ratio within each bigregion group\ndf3$ratio &lt;- ave(df3$n, df3$bigregion, FUN = function(x) x / sum(x))\n\np &lt;- ggplot(df3, aes(\n    x = bigregion, \n    y = n,\n    fill = religion)) + \n  geom_col()\n\nThis type of chart makes it easy to compare the frequency proportions of the major categories (here, bigregion), and also allows for relatively easy comparison of the subcategories (here, religion) within each major category. However, it becomes relatively difficult to compare across subcategories between different major categories. If there are only two subcategories, then comparing them across major categories is not an issue.\nAnother approach is to normalize the height of each major category. The chart then only shows the relative proportions of subcategories within each major category, without showing the total frequencies of the major categories. It also does not allow for comparing the total frequencies of subcategories across different major categories, but does allow for easy comparison of subcategory proportions across major categories.\n\np + geom_col(position = \"fill\") + \n  labs(y = NULL)\n\n\n\n\n\n\n\n\nIn the above code, the geom_col() function uses the option position = \"fill\".\nA stacked bar chart can show the frequency of each combination of subcategories, making it easier to compare the proportion and frequency of subcategories within each major category. However, it is not easy to compare the proportions across the major categories.\n\nggplot(df3, aes(\n    x = bigregion, \n    y = n,\n    fill = religion)) +\n  geom_col(position = \"dodge\")\n\n\n\n\n\n\n\n\nChange the y-axis in the above chart to represent the proportion within each major category (so that the proportions for each region sum to 1):\n\nggplot(df3, aes(\n    x = bigregion, \n    y = ratio,\n    fill = religion)) +\n  geom_col(position = \"dodge\")\n\n\n\n\n\n\n\n\nTo compare the distribution of religious proportions across different regions, you can use faceting to assign each region to a separate panel:\n\nggplot(df3, aes(\n  x = religion, y = ratio, fill=religion)) +\n　geom_col(position=\"dodge\") +\n  labs(x=NULL, y=\"Ratio\") + \n  coord_flip() + \n  facet_grid(~ bigregion) + \n  guides(fill=\"none\")"
  },
  {
    "objectID": "intro_to_r.html",
    "href": "intro_to_r.html",
    "title": "Introduction to R Programming",
    "section": "",
    "text": "You can get output from R simply by typing math in the console:\n\n1 + 1 # addition\n\n[1] 2\n\n2 - 1 # deduction\n\n[1] 1\n\n12 / 7 # division\n\n[1] 1.714286\n\n2 * 2 # multiplication\n\n[1] 4\n\n2 ^ 2 # square \n\n[1] 4\n\n\nHowever, to do useful and interesting things, we need to assign values to objects. To create an object, we need to give it a name followed by the assignment operator &lt;-, and the value we want to give it:\n\nweight_kg &lt;- 55\n\n&lt;- is the assignment operator. It assigns values on the right to objects on the left. So, after executing x &lt;- 3, the value of x is 3. The arrow can be read as 3 goes into x.\nFor historical reasons, you can also use = for assignments, but not in every context. Because of the slight differences in syntax, it is good practice to always use &lt;- for assignments.\nIn RStudio, typing Alt + - (push Alt at the same time as the - key) will write &lt;- in a single keystroke on a PC, while typing Option + - (Option and - key) does the same in a Mac.\nObjects can be named like x, current_temperature, or subject_id.\n\nBe explicit and not too long\nNot start with a number (e.g., 2x is invalid, but x2 is)\nBe case-sensitive (e.g., weight_kg ≠ Weight_kg)\nAvoid using names of built-in functions like c, T, mean, data, or if (see here for a complete list). If in doubt, check the help to see if the name is already in use. It’s also best to avoid dots (.) within an object name as in my.dataset. Instead, use underscores (_).\nIt is also recommended to use nouns for object names, and verbs for function names.\nTo improve readability, use consistent naming conventions. CIn R, three popular style guides are Google’s, Jean Fan’s and the tidyverse’s.\nYou can install the lintr package to catch issues in your code style.\n\n\n\nWhat are known as objects in R are known as variables in many other programming languages. Depending on the context, object and variable can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg &lt;- 55    # doesn't print anything\n(weight_kg &lt;- 55)  # but putting parenthesis around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg          # and so does typing the name of the object\n\n[1] 55\n\n\nNow that R hasweight_kg in memory, we can do arithmetic with it. For instance, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg):\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change an object’s value by assigning it a new one:\n\nweight_kg &lt;- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nThis means that assigning a value to one object does not change the values of other objects For example, let’s store the animal’s weight in pounds in a new object, weight_lb:\n\nweight_lb &lt;- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg &lt;- 100\n\nWhat do you think is the current content of the object weight_lb? 126.5 or 220?\n\n\n\nThe comment character in R is #, anything to the right of a # in a script will be ignored by R. It is useful to leave notes and explanations in your scripts. RStudio makes it easy to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard Ctrl + Shift + C. If you only want to comment out one line, you can put the cursor at any location of that line (i.e. no need to select the whole line), then press Ctrl + Shift + C.\n\n\n\nWhat are the values after each statement in the following?\n\nmass &lt;- 47.5      # mass?\nage &lt;- 122        # age?\nmass &lt;- mass * 2.0  # mass?\nage &lt;- age - 20     # age?\nmass_index &lt;- mass / age  # mass_index\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmass &lt;- 47.5         # mass is 47.5\nage &lt;- 122           # age is 122\nmass &lt;- mass * 2.0   # mass is 95\nage &lt;- age - 20      # age is 102\nmass_index &lt;- mass / age  # mass_index is 0.931\n\n\n\n\n\n\n\nFunctions are “canned scripts” that automate more complicated sets of commands including operations, assignments, etc. Many functions are predefined, or can be made available by importing R packages.\nA function usually takes one or more inputs called arguments. Functions often return a value.\nA typical example would be the function sqrt(). The input must be a number, and the return is the square root of that number.\nExecuting a function is called calling the function.\nAn example of a function call is:\n\nb &lt;- sqrt(4)\n\nHere, the value of 4 is given to sqrt(), which returns the square root of 4, and the result is assigned to b.\nThe return value of a function can also be a set, list, or dataset—not just a single number.\nArguments can be anything: numbers, filenames, or objects. Some functions take optional arguments (called options), which take on default values if left out.\nLet’s try a function that can take multiple arguments: round().\n\nround(3.14159)\n\n[1] 3\n\n\nWe’ve called round() with just one argument and it rounded to the value 3. That’s because the default is to round to the nearest whole number. If we want to more digits we can see how to do that by getting information about the round function. We can use args(round) to find what arguments it takes, or look at the help for this function using round.\nIf we want to know what arguments it takes:\n\nargs(round)\n\nfunction (x, digits = 0, ...) \nNULL\n\n\nTo round to a specific number of digits:\n\nround(3.14159, digits = 2)\n\n[1] 3.14\n\n\nIf you provide the arguments in the exact same order as they are defined you don’t have to name them:\n\nround(3.14159, 2)\n\n[1] 3.14\n\n\nIf we do name the arguments, we can switch their order:\n\nround(digits = 2, x = 3.14159)\n\n[1] 3.14\n\n\nIt’s good practice to put the non-optional arguments (like the number you’re rounding) first in your function call, and to then specify the names of all optional arguments. If you don’t, someone reading your code might have to look up the definition of a function with unfamiliar arguments to understand what you’re doing."
  },
  {
    "objectID": "intro_to_r.html#creating-objects-in-r",
    "href": "intro_to_r.html#creating-objects-in-r",
    "title": "Introduction to R Programming",
    "section": "",
    "text": "You can get output from R simply by typing math in the console:\n\n1 + 1 # addition\n\n[1] 2\n\n2 - 1 # deduction\n\n[1] 1\n\n12 / 7 # division\n\n[1] 1.714286\n\n2 * 2 # multiplication\n\n[1] 4\n\n2 ^ 2 # square \n\n[1] 4\n\n\nHowever, to do useful and interesting things, we need to assign values to objects. To create an object, we need to give it a name followed by the assignment operator &lt;-, and the value we want to give it:\n\nweight_kg &lt;- 55\n\n&lt;- is the assignment operator. It assigns values on the right to objects on the left. So, after executing x &lt;- 3, the value of x is 3. The arrow can be read as 3 goes into x.\nFor historical reasons, you can also use = for assignments, but not in every context. Because of the slight differences in syntax, it is good practice to always use &lt;- for assignments.\nIn RStudio, typing Alt + - (push Alt at the same time as the - key) will write &lt;- in a single keystroke on a PC, while typing Option + - (Option and - key) does the same in a Mac.\nObjects can be named like x, current_temperature, or subject_id.\n\nBe explicit and not too long\nNot start with a number (e.g., 2x is invalid, but x2 is)\nBe case-sensitive (e.g., weight_kg ≠ Weight_kg)\nAvoid using names of built-in functions like c, T, mean, data, or if (see here for a complete list). If in doubt, check the help to see if the name is already in use. It’s also best to avoid dots (.) within an object name as in my.dataset. Instead, use underscores (_).\nIt is also recommended to use nouns for object names, and verbs for function names.\nTo improve readability, use consistent naming conventions. CIn R, three popular style guides are Google’s, Jean Fan’s and the tidyverse’s.\nYou can install the lintr package to catch issues in your code style.\n\n\n\nWhat are known as objects in R are known as variables in many other programming languages. Depending on the context, object and variable can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg &lt;- 55    # doesn't print anything\n(weight_kg &lt;- 55)  # but putting parenthesis around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg          # and so does typing the name of the object\n\n[1] 55\n\n\nNow that R hasweight_kg in memory, we can do arithmetic with it. For instance, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg):\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change an object’s value by assigning it a new one:\n\nweight_kg &lt;- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nThis means that assigning a value to one object does not change the values of other objects For example, let’s store the animal’s weight in pounds in a new object, weight_lb:\n\nweight_lb &lt;- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg &lt;- 100\n\nWhat do you think is the current content of the object weight_lb? 126.5 or 220?\n\n\n\nThe comment character in R is #, anything to the right of a # in a script will be ignored by R. It is useful to leave notes and explanations in your scripts. RStudio makes it easy to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard Ctrl + Shift + C. If you only want to comment out one line, you can put the cursor at any location of that line (i.e. no need to select the whole line), then press Ctrl + Shift + C.\n\n\n\nWhat are the values after each statement in the following?\n\nmass &lt;- 47.5      # mass?\nage &lt;- 122        # age?\nmass &lt;- mass * 2.0  # mass?\nage &lt;- age - 20     # age?\nmass_index &lt;- mass / age  # mass_index\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmass &lt;- 47.5         # mass is 47.5\nage &lt;- 122           # age is 122\nmass &lt;- mass * 2.0   # mass is 95\nage &lt;- age - 20      # age is 102\nmass_index &lt;- mass / age  # mass_index is 0.931\n\n\n\n\n\n\n\nFunctions are “canned scripts” that automate more complicated sets of commands including operations, assignments, etc. Many functions are predefined, or can be made available by importing R packages.\nA function usually takes one or more inputs called arguments. Functions often return a value.\nA typical example would be the function sqrt(). The input must be a number, and the return is the square root of that number.\nExecuting a function is called calling the function.\nAn example of a function call is:\n\nb &lt;- sqrt(4)\n\nHere, the value of 4 is given to sqrt(), which returns the square root of 4, and the result is assigned to b.\nThe return value of a function can also be a set, list, or dataset—not just a single number.\nArguments can be anything: numbers, filenames, or objects. Some functions take optional arguments (called options), which take on default values if left out.\nLet’s try a function that can take multiple arguments: round().\n\nround(3.14159)\n\n[1] 3\n\n\nWe’ve called round() with just one argument and it rounded to the value 3. That’s because the default is to round to the nearest whole number. If we want to more digits we can see how to do that by getting information about the round function. We can use args(round) to find what arguments it takes, or look at the help for this function using round.\nIf we want to know what arguments it takes:\n\nargs(round)\n\nfunction (x, digits = 0, ...) \nNULL\n\n\nTo round to a specific number of digits:\n\nround(3.14159, digits = 2)\n\n[1] 3.14\n\n\nIf you provide the arguments in the exact same order as they are defined you don’t have to name them:\n\nround(3.14159, 2)\n\n[1] 3.14\n\n\nIf we do name the arguments, we can switch their order:\n\nround(digits = 2, x = 3.14159)\n\n[1] 3.14\n\n\nIt’s good practice to put the non-optional arguments (like the number you’re rounding) first in your function call, and to then specify the names of all optional arguments. If you don’t, someone reading your code might have to look up the definition of a function with unfamiliar arguments to understand what you’re doing."
  },
  {
    "objectID": "intro_to_r.html#vectors-and-data-types",
    "href": "intro_to_r.html#vectors-and-data-types",
    "title": "Introduction to R Programming",
    "section": "Vectors and data types",
    "text": "Vectors and data types\nA vector is the most basic and common data type in R.\nA vector contains a sequence of values of the same type (e.g., numbers or characters). You can create one using c().\n\nweight_g &lt;- c(50, 60, 65, 82)\nweight_g\n\n[1] 50 60 65 82\n\n\nVectors can also contain characters:\n\nanimals &lt;- c(\"cat\",\"dog\",\"rabbit\")\nanimals\n\n[1] \"cat\"    \"dog\"    \"rabbit\"\n\n\nMake sure to include quotes when defining character vectors, otherwise R will interpret them as objects have been created called cat, dog, and rabbit. As these objects don’t exist in R’s memory. there will be an error message.\nThere are many functions that allow you to inspect the content of a vector.length() tells you how many elements are in a particular vector:\n\nlength(weight_g)\n\n[1] 4\n\nlength(animals)\n\n[1] 3\n\n\nAll elements of a vector must be of the same type. To check the type:\n\nclass(weight_g)\n\n[1] \"numeric\"\n\nclass(animals)\n\n[1] \"character\"\n\n\nThe function str()provides an overview of the structure of an object and its elements. It is a useful function when working with large and complex objects:\n\nstr(weight_g)\n\n num [1:4] 50 60 65 82\n\nstr(animals)\n\n chr [1:3] \"cat\" \"dog\" \"rabbit\"\n\n\nYou can use thec()function to add other elements to your vector:\n\nweight_g &lt;- c(weight_g, 90)     # add to the end\nweight_g &lt;- c(30, weight_g)     # add to the beginning\nweight_g\n\n[1] 30 50 60 65 82 90\n\n\nIn the first line, we take the original vector weight_g, add the value 90 to the end of it, and save the result back into weight_g. Then we add the value 30 to the beginning, again saving the result back into weight_g.\nThis is useful for growing a dataset iteratively. We can do this over and over again to grow a vector, or assemble a dataset. As we program, this may be useful to add results that we are collecting or calculating.\n\n\nAtomic vectors\nAn atomic vector is the simplest R data type. R supports 6 atomic types:\n\n\"logical\": for TRUE and FALSE (the boolean data type)\n\"integer\": numbers like 2L(e.g.,2L, theL indicates to R that it’s an integer)\n\"numeric\" (or\"double\"): floating-point numbers\n\"character\": strings\n\"complex\": complex numbers like 1 + 4ito represent complex numbers with real and imaginary parts.\n\"raw\": binary data (not covered here)\n\nUse typeof() to inspect:\n\ntypeof(weight_g)\n\n[1] \"double\"\n\ntypeof(animals)\n\n[1] \"character\"\n\n\nIn R, a vector can only contain elements of a single type. When you try to combine elements of different types using a function like c(), R will automatically coerce them to the least restrictive common type. The hierarchy of coercion is roughly:\nlogical &lt; integer &lt; double (numeric) &lt; character\nFor example:\n\nc(1, 2, 3, \"1\") # Returns \"character\"\n\n[1] \"1\" \"2\" \"3\" \"1\"\n\n\nIf you want to store different types in a single object, you’d typically use a list instead:\n\nlist(1, 2, 3, \"1\")\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3\n\n[[4]]\n[1] \"1\"\n\n\n\n\nExercise\n\nCreate a vector height_mm that contains the following heights of animals: 100, 150, 99, 87 in mm respectively.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nheight_mm &lt;- c(100, 150, 99, 87)\n\n\n\n\nWhat is the total height of these animals in mm? (Hint: use function sum)\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nsum(height_mm)\n\n[1] 436\n\n\n\n\n\nAnother animal was measured and its height is 220 mm. Add this to the beginning of the vector height_mm and save the total height of the new set of animals in the total_height variable. What is the new total_height?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nheight_mm &lt;- c(220, height_mm)\ntotal_height &lt;- sum(height_mm)"
  },
  {
    "objectID": "intro_to_r.html#subsetting-vectors",
    "href": "intro_to_r.html#subsetting-vectors",
    "title": "Introduction to R Programming",
    "section": "Subsetting vectors",
    "text": "Subsetting vectors\nIf we want to extract one or several values from a vector, we must provide one or more indices in square brackets. For instance:\n\nanimals &lt;- c(\"mouse\", \"rat\", \"dog\", \"cat\")\nanimals[2]\n\n[1] \"rat\"\n\n\n\nanimals[c(3, 2)]\n\n[1] \"dog\" \"rat\"\n\n\nWe can also repeat the indices to create an object with more elements than the original one:\n\nmore_animals &lt;- animals[c(1, 2, 3, 2, 1, 4)]\nmore_animals\n\n[1] \"mouse\" \"rat\"   \"dog\"   \"rat\"   \"mouse\" \"cat\"  \n\n\nR indices start at 1. Programming languages like Fortran, MATLAB, Julia, and R start counting at 1, because that’s what human beings typically do. Languages in the C family (including C++, Java, Perl, and Python) count from 0 because that’s simpler for computers to do.\n\nConditional subsetting\nAnother common way of subsetting is by using a logical vector. TRUE will select the element with the same index, while FALSE will not:\n\nweight_g &lt;- c(21, 34, 39, 54, 55)\nweight_g[c(TRUE, FALSE, TRUE, TRUE, FALSE)]\n\n[1] 21 39 54\n\n\nThese logical vectors are often created using logical tests. For example, to select only the values greater than 50:\n\nweight_g &gt; 50    # will return logicals with TRUE for the indices that meet the condition\n\n[1] FALSE FALSE FALSE  TRUE  TRUE\n\n\n\n## so we can use this to select only the values above 50\nweight_g[weight_g &gt; 50]\n\n[1] 54 55\n\n\nYou can combine conditions using & (AND) or | (OR):\n\nweight_g[weight_g &lt; 30 | weight_g &gt; 50]\n\n[1] 21 54 55\n\n\n\nweight_g[weight_g &gt;= 30 & weight_g == 21]\n\nnumeric(0)\n\n\nNote:\n\n&lt; means less than\n&gt; means greater than\n&gt;= means greater than or equal to\n== means equal to\n\nThe double equal sign == is a test for numerical equality between the left and right hand sides, and should not be confused with the single = sign, which performs variable assignment (similar to &lt;-).\nA common task is to search for certain strings in a vector. One could use the “or” operator | to test for equality to multiple values, but this can quickly become tedious. The function %in% allows you to test if any of the elements of a search vector are found:\n\nanimals &lt;- c(\"mouse\", \"rat\", \"dog\", \"cat\")\nanimals[animals == \"cat\" | animals == \"rat\"]\n\n[1] \"rat\" \"cat\"\n\n\nHowever, this can get tedious. A better way is to use %in%:\n\nanimals %in% c(\"rat\", \"cat\", \"dog\", \"duck\", \"goat\")\n\n[1] FALSE  TRUE  TRUE  TRUE\n\n\n\nanimals[animals %in% c(\"rat\", \"cat\", \"dog\", \"duck\", \"goat\")]\n\n[1] \"rat\" \"dog\" \"cat\""
  },
  {
    "objectID": "intro_to_r.html#missing-data",
    "href": "intro_to_r.html#missing-data",
    "title": "Introduction to R Programming",
    "section": "Missing data",
    "text": "Missing data\nAs R was designed to analyze datasets, it includes the concept of missing data (which is uncommon in many other programming languages). Missing data are represented in vectors as NA.\nWhen doing operations on numbers, most functions will return NA if the data includes missing values. You can add the argument na.rm = TRUE to ignore them and only calculating based on values you have:\n\nheights &lt;- c(2, 4, 4, NA, 6)\nmean(heights)\n\n[1] NA\n\nmax(heights)\n\n[1] NA\n\nmean(heights, na.rm = TRUE)\n\n[1] 4\n\nmax(heights, na.rm = TRUE)\n\n[1] 6\n\n\nTo handle missing values, become familiar with:\n\nis.na()\nna.omit()\ncomplete.cases()\n\n\n# Extract elements that are not missing\nheights[!is.na(heights)]\n\n[1] 2 4 4 6\n\n# Remove incomplete (NA) cases. The returned object is an atomic vector of type \"numeric\" (or \"double\").\nna.omit(heights)\n\n[1] 2 4 4 6\nattr(,\"na.action\")\n[1] 4\nattr(,\"class\")\n[1] \"omit\"\n\n# Use complete case. The returned object is an atomic vector of type \"numeric\" (or \"double\").\nheights[complete.cases(heights)]\n\n[1] 2 4 4 6\n\n\nRecall that you can use the typeof() function to inspect an object’s type.\n\nExercise\n\nUsing this vector of heights in inches, create a new vector, heights_no_na, with the NAs removed.\n\n\n    heights &lt;- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)\n\n\nUse the function median() to calculate the median of the heights vector.\nHow many people in the set are taller than 67 inches?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n    heights &lt;- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)\n\n    # 1.\n    heights_no_na &lt;- heights[!is.na(heights)] \n    # or\n    heights_no_na &lt;- na.omit(heights)\n    # or\n    heights_no_na &lt;- heights[complete.cases(heights)]\n\n    # 2.\n    median(heights, na.rm = TRUE)\n\n[1] 64\n\n    # 3.\n    heights_above_67 &lt;- heights_no_na[heights_no_na &gt; 67]\n    length(heights_above_67)\n\n[1] 6"
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "R is a free software environment for statistical computing, data visualization, and data analysis. It is widely used in academic research, public health, and industry. It allows you to work with data and create plots, statistical models, and even simulations.\n\n\n\n\n\nThe learning curve might be steeper than with other software, but with R, the results of your analysis do not rely on remembering a succession of pointing and clicking, but instead on a series of written commands, and that’s a good thing!\nSo, if you want to redo your analysis because you collected more data, you don’t have to remember which button you clicked in which order to obtain your results; you just have to run your script again.\nWorking with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes.\nWorking with scripts also forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use.\n\n\nReproducibility is when someone else (including your future self) can obtain the same results from the same dataset when using the same analysis.\nR integrates with other tools to generate reports from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript are updated automatically after running the code again.\nAn increasing number of journals and funding agencies expect analyses to be reproducible, so knowing R will give you an edge with these requirements.\n\n\n\nWith 10,000+ packages that can be installed to extend its capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyze your data.\nFor instance, R has packages for image analysis, GIS, time series, population genetics, and a lot more.\n\n\n\nThe skills you learn with R scale easily with the size of your dataset. Whether your dataset has hundreds or millions of lines, it won’t make much difference to you.\nR is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient.\nR can connect to spreadsheets, databases, and many other data formats, on your computer or on the web.\n\n\n\nThe plotting functionalities in R are endless, and allow you to adjust any aspect of your graph to convey most effectively the message from your data.\n\n\n\nThousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow, or on the RStudio Community.\n\n\n\nAnyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs."
  },
  {
    "objectID": "getting_started.html#r-does-not-involve-lots-of-pointing-and-clicking",
    "href": "getting_started.html#r-does-not-involve-lots-of-pointing-and-clicking",
    "title": "Getting Started",
    "section": "",
    "text": "The learning curve might be steeper than with other software, but with R, the results of your analysis do not rely on remembering a succession of pointing and clicking, but instead on a series of written commands, and that’s a good thing!\nSo, if you want to redo your analysis because you collected more data, you don’t have to remember which button you clicked in which order to obtain your results; you just have to run your script again.\nWorking with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes.\nWorking with scripts also forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use.\n\n\nReproducibility is when someone else (including your future self) can obtain the same results from the same dataset when using the same analysis.\nR integrates with other tools to generate reports from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript are updated automatically after running the code again.\nAn increasing number of journals and funding agencies expect analyses to be reproducible, so knowing R will give you an edge with these requirements.\n\n\n\nWith 10,000+ packages that can be installed to extend its capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyze your data.\nFor instance, R has packages for image analysis, GIS, time series, population genetics, and a lot more.\n\n\n\nThe skills you learn with R scale easily with the size of your dataset. Whether your dataset has hundreds or millions of lines, it won’t make much difference to you.\nR is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient.\nR can connect to spreadsheets, databases, and many other data formats, on your computer or on the web.\n\n\n\nThe plotting functionalities in R are endless, and allow you to adjust any aspect of your graph to convey most effectively the message from your data.\n\n\n\nThousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow, or on the RStudio Community.\n\n\n\nAnyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs."
  },
  {
    "objectID": "getting_started.html#create-an-r-project",
    "href": "getting_started.html#create-an-r-project",
    "title": "Getting Started",
    "section": "Create an R Project",
    "text": "Create an R Project\nBefore starting to write code in RStudio, we need to create an R Project. An R Project is a workspace where you can keep all files and settings associated with a project. It makes resuming work easier.\nTo create an “R Project”:\n\nStart RStudio.\nUnder the File menu, click New Project. Choose New Directory, then New Project.\nEnter a name and choose a convenient location. This will be your working directory.\nClick on Create Project.\n(Optional) Set preferences to “Never” save workspace in RStudio.\n\nRStudio’s default preferences generally work well, but saving a workspace to .RData can be cumbersome, especially if you are working with larger datasets as this would save all the data that is loaded into R into the .RData file.\nTo turn it off, go to: Tools → Global Options → General and select the ‘Never’ option for Save workspace to .RData on exit."
  },
  {
    "objectID": "getting_started.html#working-directory",
    "href": "getting_started.html#working-directory",
    "title": "Getting Started",
    "section": "Working directory",
    "text": "Working directory\nWhenever we are working on a project, it is good practice to keep a set of related data, analyses, and text self-contained in a single folder, called the working directory.\nUsing a consistent folder structure across your projects will help keep things organized, and will also make it easy to find things in the future. This can be especially helpful when you have multiple projects. In general, you may create directories (folders) for scripts, data, and documents.\n\ndata/\nUse this folder to store your raw data. For the sake of transparency and provenance, you should always keep a copy of your raw data accessible and do as much of your data cleanup and preprocessing programmatically (i.e., with scripts, rather than manually).\nSeparating raw data from processed data is also a good idea. For example, you could have files data/raw/survey.plot1.txt and data/raw/survey.plot2.txt kept separate from a data_output/survey.csv file generated by the scripts/01.preprocess.survey.R script.\ndocuments/\nThis would be a place to keep documentation and other text documents.\nscripts/\nThis would be the location to keep your R scripts for different analyses or plotting.\n\n\n\n\n\n\nYou may want additional directories or subdirectories depending on your project needs, but these should form the backbone of your working directory."
  },
  {
    "objectID": "getting_started.html#example-of-a-working-directory-structure",
    "href": "getting_started.html#example-of-a-working-directory-structure",
    "title": "Getting Started",
    "section": "Example of a working directory structure",
    "text": "Example of a working directory structure\nFor this workshop, we will need a data/ folder to store our raw data, and we will use data_output/ for when we learn how to export data as CSV files, and fig_output/ folder for the figures that we will save.\n\nUnder the Files tab on the right of the screen, click on New Folder and create a folder named data within your newly created working directory (e.g., ~/my-first-project/data).\nRepeat these operations to create a data_output/ and a fig_output folder.\n\nWe are going to keep the script in the root of our working directory because we are only going to use one file and it will make things easier.\nYour working directory should now look like this:"
  },
  {
    "objectID": "getting_started.html#absolute-vs-relative-paths",
    "href": "getting_started.html#absolute-vs-relative-paths",
    "title": "Getting Started",
    "section": "Absolute vs Relative paths",
    "text": "Absolute vs Relative paths\nThe working directory is an important concept to understand. It is the place from where R will be looking for and saving the files. When you write code for your project, it should refer to files in relation to the root of your working directory and only need files within this structure.\nAll of the scripts within this folder can then use relative paths to files in the working directory that indicate where inside the project a file is located (as opposed to absolute paths, which point to where a file is on a specific computer). Working this way makes it a lot easier to move your project around on your computer and share it with others without worrying about whether or not the underlying scripts will still work.\n\n\n\n\n\n\nAbsolute vs Relative paths examples\n\n\n\nRelative path: data/dataset1.txt\nAbsolute path: C:/Users/User1/Documents/R/my-first-project/data/dataset1.txt\n\n\nUsing RStudio projects makes it easy to organise your files in the project and ensures that your working directory is set properly. RStudio shows your current working directory at the top of the console."
  },
  {
    "objectID": "getting_started.html#checking-your-working-directory",
    "href": "getting_started.html#checking-your-working-directory",
    "title": "Getting Started",
    "section": "Checking your working directory",
    "text": "Checking your working directory\nAnother way to check your working directory is by typing getwd() in the console pane.\nIf for some reason your working directory is not what it should be, you can change it in the RStudio interface by navigating in the file browser where your working directory should be, and clicking on the blue gear icon More, and select Set As Working Directory.\nAlternatively, you can use setwd(\"/path/to/working/directory\") to reset your working directory (not recommended). However, your scripts should not include this line because it will fail on someone else’s computer."
  },
  {
    "objectID": "getting_started.html#interacting-with-r",
    "href": "getting_started.html#interacting-with-r",
    "title": "Getting Started",
    "section": "Interacting with R",
    "text": "Interacting with R\nThe basis of programming is that we write down instructions for the computer to follow, and then we tell the computer to follow those instructions. We write, or code, instructions in R because it is a common language that both the computer and we can understand. We call the instructions commands and we tell the computer to follow the instructions by executing (also called running) those commands.\nThere are two main ways of interacting with R:\n\nusing the console\nusing script files (plain text files that contain your code)\n\nThe console pane (bottom left in RStudio) is where commands typed in R are executed immediately. You can type commands directly into the console and press Enter to execute them — but they will be forgotten when you close the session.\nIt is better to type the commands we want in the script editor, and save the script. This way, there is a complete record of what we did, and anyone (including our future selves!) can easily replicate the results.\nRStudio allows you to execute commands directly from the script editor by using the keyboard shortcut:\n\nCtrl + Enter (on Mac: Cmd + Return)\n\nThe current line or all selected lines will be sent to the console and executed.\nYou can find more shortcuts in this RStudio cheatsheet about the RStudio IDE.\nTo check a variable or an object without saving it in your script, type the command directly in the console.\nWhen R is ready to accept a command, the console shows a &gt; prompt. After running a command, it will return to &gt; when ready.\nIf you see a + prompt, it means R is still waiting for you to finish the command (e.g., due to an unclosed parenthesis or quote). You can press Esc to cancel the incomplete command."
  },
  {
    "objectID": "getting_started.html#how-to-learn-more-after-the-workshop",
    "href": "getting_started.html#how-to-learn-more-after-the-workshop",
    "title": "Getting Started",
    "section": "How to learn more after the workshop?",
    "text": "How to learn more after the workshop?\nThe material we cover during this sessoin will give you an initial taste of how you can use R to analyze data for your own research. However, you will need to learn more to do advanced operations such as cleaning your dataset, using statistical methods, or creating beautiful graphics.\nThe best way to become proficient and efficient at R, as with any other tool, is to use it to address your actual research questions.\nAs a beginner, it can feel daunting to write a script from scratch. Many people make their code available online, and modifying existing code to suit your purpose might make it easier for you to get started."
  },
  {
    "objectID": "getting_started.html#seeking-help",
    "href": "getting_started.html#seeking-help",
    "title": "Getting Started",
    "section": "Seeking help",
    "text": "Seeking help\nUse the built-in RStudio help interface to search for more information on R functions\nOne of the fastest ways to get help is to use the RStudio help interface. This panel can be found at the lower right-hand panel of RStudio.\nBy typing a keyword (e.g., \"Mean\"), RStudio will suggest relevant functions and display help files.\n\n\n\n\n\nI know the name of the function I want to use, but I’m not sure how to use it:\nIf you need help with a specific function, such as barplot(), you can type:\n\n?barplot\n\nIf you just need to remind yourself of the names of the arguments in the function, you can use:\n\nargs(lm)\n\nI want to use a function that does X, there must be a function for it but I don’t know which one:\nIf you are looking for a function to do a particular task, you can use the help.search() function, which is called by the double question mark ??. However, this only looks through the installed packages for help pages with a match to your search request.\n\n??round\n\nIf you still can’t find what you’re looking for, try:\n\nhttps://rdocumentation.org\nA Google search for “R, &lt;description of error/error message&gt;” often returns helpful documentation or forum answers.\n\nI am stuck… I get an error message that I don’t understand\nStart by googling the error message. However, this doesn’t always work very well because often, package developers rely on the error catching provided by R. You end up with general error messages that might not be very helpful to diagnose a problem (e.g. “subscript out of bounds”). If the message is very generic, you might also include the name of the function or package you’re using in your query.\nYou can also check Stack Overflow.Most questions have already been answered, but the challenge is to use the right words in the search to find the answers:\nhttp://stackoverflow.com/questions/tagged/r\nOther helpful resources:\n\nIntroduction to R - can be dense for people with little programming experience but it is a good place to understand the underpinnings of the R language.\nR FAQ is dense and technical but it is full of useful information.\n\n\nAsking for help\nThe key to receiving help from someone is for them to rapidly grasp your problem. You should make it as easy as possible to pinpoint where the issue might be.\nTo get good help, Try to use the correct words to describe your problem clearly. - Avoid ambiguous terms. For example, “package” is not the same as “library”. Most people will understand what you meant, but others have really strong feelings about the difference in meaning. The key point is that it can make things confusing for people trying to help you. Be as precise as possible when describing your problem.\n\nUse a small reproducible example. Don’t send 50,000 rows of your real data — instead, create a 3-column, 5-row generic example if possible. For more information on how to write a reproducible example see this article by Hadley Wickham.\n\nTo share an object with someone else, if it’s relatively small, you can use the function dput(). It will output R code that can be used to recreate the exact same object as the one in memory:\n\ndput(head(iris))  # iris is an example data frame that comes with R\n\nIf the object is larger, provide either the raw file (i.e., your CSV file) with your script up to the point of the error (and after removing everything that is not relevant to your issue). Alternatively, in particular if your question is not related to a data frame, you can save any R object to a file with saveRDS():\n\nsaveRDS(iris, file = \"/tmp/iris.rds\")\n\nThe content of this file is however not human readable and cannot be posted directly on Stack Overflow. Instead, it can be sent to someone by email who can read it with the readRDS() command (here it is assumed that the downloaded file is in a Downloads folder in the user’s home directory):\n\ndata &lt;- readRDS(file = \"~/Downloads/iris.rds\")\n\nLast, but certainly not least, always include the output of sessionInfo() for context as it provides critical information about your platform, the versions of R and the packages that you are using, and other information that can be very helpful to understand your problem.\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 26100)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United Kingdom.utf8 \n[2] LC_CTYPE=English_United Kingdom.utf8   \n[3] LC_MONETARY=English_United Kingdom.utf8\n[4] LC_NUMERIC=C                           \n[5] LC_TIME=English_United Kingdom.utf8    \n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.2    fastmap_1.2.0     cli_3.6.4        \n [5] tools_4.4.2       htmltools_0.5.8.1 rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.50        jsonlite_1.9.1    xfun_0.52        \n[13] digest_0.6.37     rlang_1.1.5       evaluate_1.0.3   \n\n\n\nWhere to ask for help?\n\nThe person sitting next to you during the workshop. Don’t hesitate to talk to your neighbor during the workshop, compare your answers, and ask for help. You might also be interested in organizing regular meetings following the workshop to keep learning from each other.\nYour friendly colleagues: if you know someone with more experience than you, they might be able and willing to help you.\nStack Overflow: if your question hasn’t been answered before and is well crafted, chances are you will get an answer in less than 5 min. Remember to follow their guidelines on how to ask a good question.\nThe R-help mailing list: it is read by a lot of people (including most of the R core team), a lot of people post to it, but the tone can be pretty dry, and it is not always very welcoming to new users. If your question is valid, you are likely to get an answer very fast but don’t expect that it will come with smiley faces. Also, here more than anywhere else, be sure to use correct vocabulary (otherwise you might get an answer pointing to the misuse of your words rather than answering your question). You will also have more success if your question is about a base function rather than a specific package.\nIf your question is about a specific package, see if there is a mailing list for it. Usually it’s included in the DESCRIPTION file of the package that can be accessed using packageDescription(\"name-of-package\"). You may also want to try to email the author of the package directly, or open an issue on the code repository (e.g., GitHub).\n\nThere are also some topic-specific mailing lists (GIS, phylogenetics, etc…), the complete list is here.\nMore resources\n\nThe Posting Guide for the R mailing lists.\nHow to ask for R help useful guidelines\nThis blog post by Jon Skeet has quite comprehensive advice on how to ask programming questions.\nThe reprex package is very helpful to create reproducible examples when asking for help. The [rOpenSci community call “How to ask questions so they get answered”], rOpenSci Blog and video recording includes a presentation of the reprex package and of its philosophy."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to RStudio for Public Health",
    "section": "",
    "text": "R is one of the leading programming languages in Data Science and Public Health Research. It is widely used to perform statistics, machine learning, visualizations, and data analyses. It is an open-source programming language, meaning all the software we will use in the course is free.\nThis course is designed as an introduction to R and RStudio for participants with no prior programming experience. We will start from scratch by introducing how to start programming in R, read and write data, manipulate data, and visualize data by creating different plots — covering all the fundamental tasks needed to begin analyzing your own data.\nWe will be using RStudio, a powerful and user-friendly interface that simplifies writing and developing R code. In this session, we’ll cover data types in R, perform basic operations and data manipulation, and introduce ggplot2 for data visualization."
  },
  {
    "objectID": "index.html#windows",
    "href": "index.html#windows",
    "title": "Introduction to RStudio for Public Health",
    "section": "Windows",
    "text": "Windows\n\nIf you already have R and RStudio installed\n\nOpen RStudio, click Help &gt; Check for Updates. Update if necessary.\nTo check your R version, start RStudio and type sessionInfo().\nYou can also check the latest version on the CRAN website and RStudio download page.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from CRAN.\nInstall the downloaded .exe file.\nDownload RStudio from the RStudio download page.\nChoose RStudio x.yy.zzz - Windows Vista/7/8/10.\nInstall RStudio and open it to check it runs correctly."
  },
  {
    "objectID": "index.html#macos",
    "href": "index.html#macos",
    "title": "Introduction to RStudio for Public Health",
    "section": "macOS",
    "text": "macOS\n\nIf you already have R and RStudio installed\n\nOpen RStudio, click Help &gt; Check for Updates.\nStart RStudio and type sessionInfo() to check your R version.\nVerify your version against CRAN.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from CRAN.\nInstall the .pkg file.\nInstall XQuartz if prompted.\nDownload RStudio from the RStudio download page.\nChoose RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit).\nInstall and test RStudio."
  },
  {
    "objectID": "index.html#linux",
    "href": "index.html#linux",
    "title": "Introduction to RStudio for Public Health",
    "section": "Linux",
    "text": "Linux\n\nFollow Linux distribution instructions from CRAN.\nFor Ubuntu/Debian: Install R via sudo apt-get install r-base.\nDownload RStudio from the RStudio download page.\nInstall using: sudo dpkg -i rstudio-x.yy.zzz-amd64.deb.\nOpen RStudio to verify it works.\n\nAdditionally, you will need to install the ggplot2 package. Details are provided in the setup section."
  },
  {
    "objectID": "starting_with_data.html",
    "href": "starting_with_data.html",
    "title": "Starting with Data",
    "section": "",
    "text": "Before diving into analysis, it’s essential to first gain a clear understanding of your dataset. Proper data analysis starts with knowing what your data represents and how it is structured.\n\n\nIn this section, we will begin by examining an example dataset on dengue. To do this, we’ll start by loading the data into R and taking a closer look at its contents. We will use read.csv() to load into memory the content of the CSV file as an object of class data.frame.\n\ncolombia_data &lt;- read.csv(\"National-level data_COLOMBIA_20021229_20221231.csv\")\n\nThis command won’t display anything on its own because the data is being assigned to a variable. To confirm that the data was loaded correctly, you can use View to check it out:\n\nView(colombia_data)\n\nwe can alos just look at the first few rows using the head() function:\n\nhead(colombia_data)\n\n  adm_0_name adm_1_name adm_2_name full_name ISO_A0 FAO_GAUL_code RNE_iso_code\n1   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n2   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n3   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n4   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n5   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n6   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n  IBGE_code calendar_start_date calendar_end_date Year dengue_total\n1        NA          2002-12-29        2003-12-27 2002          382\n2        NA          2004-01-04        2005-01-01 2004         1614\n3        NA          2005-01-02        2005-12-31 2005         1938\n4        NA          2006-01-01        2006-12-30 2006         1667\n5        NA          2006-12-31        2007-12-29 2006         3257\n6        NA          2006-12-31        2007-01-06 2006          661\n  case_definition_standardised  S_res T_res                    UUID\n1                        Total Admin0  Year     MOH-COL-2005-Y01-00\n2                        Total Admin0  Year     MOH-COL-2005-Y01-00\n3                        Total Admin0  Year     MOH-COL-2005-Y01-00\n4                        Total Admin0  Year     MOH-COL-2006-Y01-01\n5                        Total Admin0  Year     MOH-COL-2008-Y01-02\n6                        Total Admin0  Week MOH-COL-20072022-Y02-00\n\n\n\nNote\nThe read.csv() function assumes that values are separated by commas. However, in some regions, commas are used as decimal marks and semicolons (;) are used instead to separate fields. In such cases, you should use read.csv2(), which works similarly but expects different separators.\nIf your data uses another format, you can customize separators manually. For example, the more general read.table() function allows you to define both the field separator and other options. To learn more, type ?read.csv in your R console.\nFor tab-separated files, read.delim() is another helpful function. All of these are actually shortcuts to read.table() with preset options. For instance, the same data can be loaded using: colombia_data &lt;- read.table(file = \"datat/National-level data_COLOMBIA_20021229_20221231.csv\", sep = \",\", header = TRUE)\nJust remember to set header = TRUE if your file contains column names, since read.table() assumes otherwise by default.\n\n\n\n\nIn R, data frames are one of the most commonly used data structures. They are extremely useful because many real-world datasets come in table format, which aligns well with how data frames organize information. In fact, data frames are the standard format for most data manipulation, plotting, and analysis tasks in R.\nA data frame stores data in a tabular layout where each column is a vector of the same length. Each column can hold only one type of data (e.g., numeric, character, or logical), but different columns can hold different types. For example, one column might contain numbers, another column text, and another logical values like TRUE or FALSE.\nBelow is an illustration showing a simple data frame with three rows and three columns: one numeric, one character, and one logical:\n\nTo explore the structure of a data frame in R, you can use the str() function. This gives you a quick overview of column names, data types, and a preview of values:\n\nstr(colombia_data)\n\n'data.frame':   844 obs. of  16 variables:\n $ adm_0_name                  : chr  \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" ...\n $ adm_1_name                  : logi  NA NA NA NA NA NA ...\n $ adm_2_name                  : logi  NA NA NA NA NA NA ...\n $ full_name                   : chr  \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" ...\n $ ISO_A0                      : chr  \"COL\" \"COL\" \"COL\" \"COL\" ...\n $ FAO_GAUL_code               : int  54 54 54 54 54 54 54 54 54 54 ...\n $ RNE_iso_code                : chr  \"COL\" \"COL\" \"COL\" \"COL\" ...\n $ IBGE_code                   : logi  NA NA NA NA NA NA ...\n $ calendar_start_date         : chr  \"2002-12-29\" \"2004-01-04\" \"2005-01-02\" \"2006-01-01\" ...\n $ calendar_end_date           : chr  \"2003-12-27\" \"2005-01-01\" \"2005-12-31\" \"2006-12-30\" ...\n $ Year                        : int  2002 2004 2005 2006 2006 2006 2007 2007 2007 2007 ...\n $ dengue_total                : int  382 1614 1938 1667 3257 661 3602 611 490 440 ...\n $ case_definition_standardised: chr  \"Total\" \"Total\" \"Total\" \"Total\" ...\n $ S_res                       : chr  \"Admin0\" \"Admin0\" \"Admin0\" \"Admin0\" ...\n $ T_res                       : chr  \"Year\" \"Year\" \"Year\" \"Year\" ...\n $ UUID                        : chr  \"MOH-COL-2005-Y01-00\" \"MOH-COL-2005-Y01-00\" \"MOH-COL-2005-Y01-00\" \"MOH-COL-2006-Y01-01\" ...\n\n\n\n\nBefore we start analysing the data, it’s a good idea to take a quick look to understand what we’re working with. We also want to make sure our data has loaded correctly into R.\nWe’ve already seen a few helpful functions like head(), view(), and str() that give us a quick look at the contents and structure of a data frame. Here are some other basic functions that can help us explore our data:’\n\n\n\ndim(data) — tells you the number of rows and columns.\nnrow(data) — gives you the number of rows.\nncol(data) — gives you the number of columns.\n\n\n\n\n\nhead(data) — shows the first few rows (default is 6).\ntail(data) — shows the last few rows.\n\n\n\n\n\nnames(data) — shows the column names.\nrownames(data) — shows the row names (usually just numbers).\n\n\n\n\n\nstr(data) — gives an overview of the data frame: column names, data types, and a preview of values.\nsummary(data) — provides basic statistics (like min, max, mean) for each column.\n\nNote: Most of these functions also work with other types of objects, not just data.frame.\n\n\n\n\n\n\nA data frame in R is like a table with rows and columns. To look at specific values inside this table, we use numbers to show the position of each item.\nTo get data from a certain row and column, we use square brackets like this: data[row, column]. For example, [2,3] means row 2, column 3.\nImportant: [] are for accessing data. () are for calling functions like mean() or summary().\nLet’s look at a few more examples of how to select parts of a data frame using numbers.\n\n# get the value in the 1st row and 1st column\ncolombia_data[1, 1]\n\n[1] \"COLOMBIA\"\n\n# get the value in the 1st row and 6th column\ncolombia_data[1, 6]\n\n[1] 54\n\n# get the entire 1st column as a vector\ncolombia_data[, 1]\n\n  [1] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n  [7] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [13] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [19] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [25] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [31] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [37] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [43] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [49] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [55] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [61] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [67] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [73] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [79] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [85] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [91] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [97] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[103] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[109] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[115] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[121] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[127] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[133] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[139] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[145] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[151] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[157] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[163] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[169] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[175] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[181] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[187] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[193] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[199] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[205] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[211] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[217] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[223] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[229] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[235] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[241] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[247] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[253] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[259] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[265] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[271] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[277] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[283] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[289] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[295] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[301] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[307] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[313] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[319] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[325] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[331] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[337] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[343] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[349] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[355] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[361] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[367] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[373] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[379] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[385] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[391] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[397] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[403] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[409] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[415] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[421] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[427] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[433] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[439] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[445] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[451] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[457] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[463] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[469] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[475] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[481] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[487] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[493] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[499] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[505] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[511] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[517] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[523] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[529] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[535] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[541] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[547] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[553] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[559] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[565] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[571] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[577] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[583] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[589] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[595] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[601] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[607] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[613] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[619] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[625] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[631] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[637] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[643] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[649] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[655] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[661] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[667] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[673] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[679] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[685] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[691] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[697] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[703] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[709] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[715] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[721] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[727] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[733] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[739] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[745] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[751] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[757] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[763] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[769] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[775] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[781] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[787] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[793] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[799] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[805] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[811] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[817] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[823] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[829] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[835] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[841] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n\n# get the first 3 values from the 7th column\ncolombia_data[1:3, 7]\n\n[1] \"COL\" \"COL\" \"COL\"\n\n# get the entire 3rd row as a data frame\ncolombia_data[3, ]\n\n  adm_0_name adm_1_name adm_2_name full_name ISO_A0 FAO_GAUL_code RNE_iso_code\n3   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n  IBGE_code calendar_start_date calendar_end_date Year dengue_total\n3        NA          2005-01-02        2005-12-31 2005         1938\n  case_definition_standardised  S_res T_res                UUID\n3                        Total Admin0  Year MOH-COL-2005-Y01-00\n\n# get the first 6 rows (just like the head() function)\nhead_colombia &lt;- colombia_data[1:6, ]\n\nThe : operator helps you create a sequence of numbers. For example:\n\n1:10 gives you numbers from 1 to 10\n10:1 gives you numbers from 10 to 1\n\nYou can also leave out (exclude) parts of a data frame using the minus - sign:\n\n# all columns except the first one\ncolombia_data[, -1]  \n\n# similar to head(colombia), keeps only rows 1 to 6\ncolombia_data[-(7:34786), ]     \n\n\n\n\nInstead of using numbers to access rows and columns, we can also use the names of the columns directly. This is called name indexing.\nHere are a few examples using the colombia data:\n\n# get the \"value\" column as a vector\ncolombia_data[, \"dengue_total\"]\n\n  [1]  382 1614 1938 1667 3257  661 3602  611  490  440  775  623  922  621  629\n [16]  727  731 1005  589  902 1192 1213  589 1141 1041 1017  800  629  657 1056\n [31] 1041 1005  967  766  812  657  896  905  776  822  790  840 1153  752  720\n [46]  584  692  787  668  696  696  834  736  685 1104  591  410  528  709  868\n [61]  862  840  821  790  844  828  740  732  598  593  654  743  715  672  679\n [76]  619  715  706  680  614  750  727  706  611  709  736  696  689  672  588\n [91]  572  559  574  632  592  622  664  661  693  727  785  789  735  742  690\n[106]  561  741  674  676  484  414  711  697  695  639  725  673  670  622  756\n[121]  612  635  610  687  628  718  771  672  670  769  858  838  975  926  882\n[136]  866  962 1001 1032 1058 1082 1108 1128 1148 1169 1225 1197 1156 1258 1240\n[151] 1193 1226 1278 1149 1254 1217 1335 1469 1546 1688 1537 1478 1507 5010 2177\n[166] 2457 2697 3099 3713 4229 4509 4308 4782 4569 4927 4400 4577 4874 4466 4824\n[181] 4600 4496 4771 4785 4511 4395 4374 4244 3892 3632 3494 3181 3287 3012 3028\n[196] 2648 2600 2456 2326 2085 1831 1773 1550 1511 1427 1296 1143 1167 1081 1010\n[211]  906  897  944  835  739  720 1255  759  795  741  660  673  553  603  527\n[226]  545  526  470  480  530  519  494  530  591  584  590  617  622  626  640\n[241]  634  605  549  652  560  546  509  550  520  523  455  571  486  483  507\n[256]  513  470  480  524  552  540  544  569  597  599  632  648  688  697 1448\n[271]  905 1002 1033 1018 1063 1005 1019  948  950  994  953 1170 1136 1292 1375\n[286] 1345 1448 1689  981  802  813  849  895  909  915  909 1061 1009 1004  869\n[301]  920  742  795  929  986 1147 1111 1080 1018  951  902  950  902 1053  967\n[316] 1052 1061 1174 1129 1232 1283 1283 1151 1765 1773 1917 1932 2060 2108 2189\n[331] 2146 2050 2070 3084 3279 2924 2939 2877 2866 3109 3005 2763 2798 2844 2605\n[346] 3056 3002 3013 2703 2435 2366 2167 2292 2048 2101 2204 2231 2260 2292 2212\n[361] 2404 2370 2291 2183 2469 2528 2218 2276 2311 1964 1789 2362 2046 2001 2670\n[376] 2467 2338 2434 2079 2054 2014 2010 1742 1793 1884 1819 1743 2098 1839 1729\n[391] 1878 1844 1816 1812 1974 1707 2011 2104 1724 2087 2149 2091 2100 2025 1836\n[406] 1879 1912 1746 1869 2122 2173 2090 2149 2148 2236 2416 2207 2114 2131 2024\n[421] 1849 2068 2139 2081 2038 2464 1821 2115 1366 1460 1738 1934 2245 2184 2493\n[436] 2388 1992 1930 1839 2106 1977 2085 1921 2015 1967 1732 1688 2116 1807 1757\n[451] 1924 1877 1850 1743 1717 1667 1507 1526 1454 1585 1577 1431 1374 1360 1280\n[466] 1361 1416 1585 1664 1732 1719 1724 1917 2149 2271 2259 2457 2313 2547 2890\n[481] 2630 2179 2938 2422 2844 2559 1589 1486 1528 1126  928  832  812 2762 2981\n[496] 1920 3115 1577 3289 3180 3007 2661 2906 2244 1035 2440  924 2658 2491 2544\n[511] 2699 2578 2543 2394 2192 1971 2040 1622 1395 1322 1210 1149  808 1081  930\n[526]  930  960  939  945  872  900  651  518  466  487  403  475  501  483  439\n[541]  434  452  386  417  482  396  812  816  459  510  496  435  431  432  756\n[556]  691  629  477  483  465  404  419  476  432  430  466  526  505  450  508\n[571]  453  416  481  413  385  468  402  392  366  419  411  481  463  455  426\n[586]  533  452  425  458  403  411  530  488  416  432  477  493 1269 1491  515\n[601]  409  897  383  578  855  330 1332 1582 1227  808  683 1585  797  759 1587\n[616]  914  870  886  911  917 1748  734  887 1055  821  884 1163 1207  914  931\n[631]  906 1447  876  933 1016 1655 1634 2633 3195 3077 1631 2822 1678 2647 1747\n[646] 1840 1669 1669 2287 1860 2286 1830 2347 1832 2625 1919 2523 1799 2398 1853\n[661] 2376 2022 2150 3074 1957 2698 2292 2353 2239 2536 2344 2522 2447 2566 2873\n[676] 2819 2876 2679 2957 2672 2525 3038 2780 2887 2832 3578 2678 3099 3431  639\n[691]  623 3622  647 3452  636 3650  698 3709  632 3428  631 3223  634 3145  702\n[706] 3237  680 2880 1331 1841 1701 1063 1684  910 1609 1037 1582  894 1561  749\n[721] 1450  685 1474  714 1499 1435  659 1230  623 1061  668  672  670  790  687\n[736]  661  644  726  661  711  658  673  626 1576  669 1398  671  582  677  594\n[751]  698  622  687  629  718  632  600  690  571  619  687  551  796  527  574\n[766]  774  570  844  515  899  488 1012  504 1146  568 1138  595 1347  589 1411\n[781]  647 1479 1604 1518 1595 1855 1985 1743 2172 1951 1777 1655 1074 1540  931\n[796]  946 1494  844 1590  931  957  829  784 1709  834  841  839 1697  904 1675\n[811]  985 1603  924 1643 1394  880 1565 1115 1561 1134 1239 1398 1422 1548 1553\n[826] 1443 1268 1267 1366 1306 1299 1472 1324 1488 1367 1161 1325 1405 1337 1728\n[841] 1270 1253 1520 1776\n\n\n\n# this does the same thing\ncolombia_data$dengue_total\n\n\n# get the \"Country\" and \"value\" columns for the first three rows\n# (this mixes row numbers with column names)\ncolombia_data[1:3, c(\"Year\", \"dengue_total\")]\n\n  Year dengue_total\n1 2002          382\n2 2004         1614\n3 2005         1938\n\n\nIn RStudio, you can use the Tab key to auto-complete column names, which helps avoid typos.\n\n\n\nSometimes we want to look at rows in our dataset that match a specific condition. This is called logical indexing. In R, we can use conditions to select the rows that meet our criteria.\nHere’s how we can find and work with records where the year is 2007 in our dataset:\n\n# get all the records where Year is 2007 and save those records into a new data frame\nyear_2007_data &lt;- colombia_data[colombia_data$Year == 2007, ]\n\n# count how many records are from the year 2007\nnrow(year_2007_data)\n\n[1] 53\n\n\nThis method is helpful when you want to focus only on specific parts of your data — for example, all data points from a certain year, a certain region, or with a certain status.\n\n\n\n\nLet’s try a few short tasks to help you explore how to work with rows in your dataset.\n\nCreate a new data frame that only includes row 200 from your dataset. Name it data_200.\nUse nrow() to find how many rows are in your dataset. Then:\n\nPull out the last row using that number.\nUse tail() to check the result.\nSave the last row into a new data frame named data_last.\n\nFind the middle row (the one halfway through the dataset). Save it in an object called data_middle.\nUse negative indexing with nrow() to create a new object that keeps only the first six rows (like using head()).\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n# 1. Get the 200th row\ndata_200 &lt;- colombia_data[200, ]\n\n# 2. Use nrow() to get total number of rows\nn_rows &lt;- nrow(colombia_data)\n\n# Extract last row using total number of rows\ndata_last &lt;- colombia_data[n_rows, ]\n\n# Optional: verify it looks correct\ntail(colombia_data)\n\n    adm_0_name adm_1_name adm_2_name full_name ISO_A0 FAO_GAUL_code\n839   COLOMBIA         NA         NA  COLOMBIA    COL            54\n840   COLOMBIA         NA         NA  COLOMBIA    COL            54\n841   COLOMBIA         NA         NA  COLOMBIA    COL            54\n842   COLOMBIA         NA         NA  COLOMBIA    COL            54\n843   COLOMBIA         NA         NA  COLOMBIA    COL            54\n844   COLOMBIA         NA         NA  COLOMBIA    COL            54\n    RNE_iso_code IBGE_code calendar_start_date calendar_end_date Year\n839          COL        NA          2022-09-04        2022-09-10 2022\n840          COL        NA          2022-11-13        2022-11-19 2022\n841          COL        NA          2022-09-18        2022-09-24 2022\n842          COL        NA          2022-09-25        2022-10-01 2022\n843          COL        NA          2022-11-06        2022-11-12 2022\n844          COL        NA          2022-12-04        2022-12-10 2022\n    dengue_total case_definition_standardised  S_res T_res                UUID\n839         1337                        Total Admin0  Week MOH-COL-2022-Y02-05\n840         1728                        Total Admin0  Week MOH-COL-2022-Y02-05\n841         1270                        Total Admin0  Week MOH-COL-2022-Y02-05\n842         1253                        Total Admin0  Week MOH-COL-2022-Y02-05\n843         1520                        Total Admin0  Week MOH-COL-2022-Y02-05\n844         1776                        Total Admin0  Week MOH-COL-2022-Y02-05\n\n# 3. Get the middle row\ndata_middle &lt;- colombia_data[n_rows/2, ]\n\n# 4. Keep only the first 6 rows (remove rows 7 to the end)\ndata_head &lt;- colombia_data[-(7:n_rows), ]\n\n\n\n\n\n\n\n\nIn our dataset, some columns like T_res (which shows if the data is recorded by week or year) look like text, but they actually represent categories. These kinds of columns are good candidates for factor in R.\n\n\nFactors are a special type in R used for categorical data — data that has a fixed set of possible values (called levels). For example, T_res only includes \"Week\" and \"Year\", and these are its levels.\nBy turning this column into a factor, we can make our data cleaner and often easier to analyze or visualize.\nWe can convert these columns that contain categorical data to type factor by using the factor() function:\n\ncolombia_data$T_res &lt;- factor(colombia_data$T_res)\n\nTo check that it worked, we can use the summary() function:\n\nsummary(colombia_data$T_res)\n\nWeek Year \n 835    9 \n\n\nBy default, R always sorts levels in alphabetical order. For instance, if you have a factor with 2 levels:\n\nsex &lt;- factor(c(\"male\", \"female\", \"female\", \"male\"))\n\nR will assign 1 to the level \"female\" and 2 to the level \"male\" (because f comes before m, even though the first element in this vector is \"male\"). You can see this by using the function levels() and you can find the number of levels using nlevels():\n\nlevels(sex)\n\n[1] \"female\" \"male\"  \n\nnlevels(sex)\n\n[1] 2\n\n\nSometimes, the order of the factors does not matter, other times you might want to specify the order because it is meaningful (e.g., “low”, “medium”, “high”), it improves your visualization, or it is required by a particular type of analysis. Here, one way to reorder our levels in the sex vector would be:\n\nsex # current order\n\n[1] male   female female male  \nLevels: female male\n\n\n\nsex &lt;- factor(sex, levels = c(\"male\", \"female\"))\nsex # after re-ordering\n\n[1] male   female female male  \nLevels: male female\n\n\nIn R’s memory, these factors are represented by integers (1, 2, 3), but are more informative than integers because factors are self describing: \"female\", \"male\" is more descriptive than 1, 2. Which one is “male”? You wouldn’t be able to tell just from the integer data. Factors, on the other hand, have this information built in. It is particularly helpful when there are many levels (like the species names in our example dataset).\n\n\n\nIf you need to convert a factor to a character vector, you use as.character(x).\n\nas.character(sex)\n\n[1] \"male\"   \"female\" \"female\" \"male\"  \n\n\nIn some cases, you may have to convert factors where the levels appear as numbers (such as concentration levels or years) to a numeric vector. For instance, in one part of your analysis the years might need to be encoded as factors (e.g., comparing average weights across years) but in another part of your analysis they may need to be stored as numeric values (e.g., doing math operations on the years). This conversion from factor to numeric is a little trickier. The as.numeric() function returns the index values of the factor, not its levels, so it will result in an entirely new (and unwanted in this case) set of numbers. One method to avoid this is to convert factors to characters, and then to numbers.\nAnother method is to use the levels() function. Compare:\n\nyear_fct &lt;- factor(c(1990, 1983, 1977, 1998, 1990))\nas.numeric(year_fct)               # Wrong! And there is no warning...\n\n[1] 3 2 1 4 3\n\nas.numeric(as.character(year_fct)) # Works...\n\n[1] 1990 1983 1977 1998 1990\n\nas.numeric(levels(year_fct))[year_fct]    # The recommended way.\n\n[1] 1990 1983 1977 1998 1990\n\n\nNotice that in the levels() approach, three important steps occur:\n\nWe obtain all the factor levels using levels(year_fct).\nWe convert these levels to numeric values using as.numeric(levels(year_fct)).\nWe then access these numeric values using the underlying integers of the vector year_fct inside the square brackets."
  },
  {
    "objectID": "starting_with_data.html#reading-in-data-from-a-file",
    "href": "starting_with_data.html#reading-in-data-from-a-file",
    "title": "Starting with Data",
    "section": "",
    "text": "In this section, we will begin by examining an example dataset on dengue. To do this, we’ll start by loading the data into R and taking a closer look at its contents. We will use read.csv() to load into memory the content of the CSV file as an object of class data.frame.\n\ncolombia_data &lt;- read.csv(\"National-level data_COLOMBIA_20021229_20221231.csv\")\n\nThis command won’t display anything on its own because the data is being assigned to a variable. To confirm that the data was loaded correctly, you can use View to check it out:\n\nView(colombia_data)\n\nwe can alos just look at the first few rows using the head() function:\n\nhead(colombia_data)\n\n  adm_0_name adm_1_name adm_2_name full_name ISO_A0 FAO_GAUL_code RNE_iso_code\n1   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n2   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n3   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n4   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n5   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n6   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n  IBGE_code calendar_start_date calendar_end_date Year dengue_total\n1        NA          2002-12-29        2003-12-27 2002          382\n2        NA          2004-01-04        2005-01-01 2004         1614\n3        NA          2005-01-02        2005-12-31 2005         1938\n4        NA          2006-01-01        2006-12-30 2006         1667\n5        NA          2006-12-31        2007-12-29 2006         3257\n6        NA          2006-12-31        2007-01-06 2006          661\n  case_definition_standardised  S_res T_res                    UUID\n1                        Total Admin0  Year     MOH-COL-2005-Y01-00\n2                        Total Admin0  Year     MOH-COL-2005-Y01-00\n3                        Total Admin0  Year     MOH-COL-2005-Y01-00\n4                        Total Admin0  Year     MOH-COL-2006-Y01-01\n5                        Total Admin0  Year     MOH-COL-2008-Y01-02\n6                        Total Admin0  Week MOH-COL-20072022-Y02-00\n\n\n\nNote\nThe read.csv() function assumes that values are separated by commas. However, in some regions, commas are used as decimal marks and semicolons (;) are used instead to separate fields. In such cases, you should use read.csv2(), which works similarly but expects different separators.\nIf your data uses another format, you can customize separators manually. For example, the more general read.table() function allows you to define both the field separator and other options. To learn more, type ?read.csv in your R console.\nFor tab-separated files, read.delim() is another helpful function. All of these are actually shortcuts to read.table() with preset options. For instance, the same data can be loaded using: colombia_data &lt;- read.table(file = \"datat/National-level data_COLOMBIA_20021229_20221231.csv\", sep = \",\", header = TRUE)\nJust remember to set header = TRUE if your file contains column names, since read.table() assumes otherwise by default."
  },
  {
    "objectID": "starting_with_data.html#data-frames",
    "href": "starting_with_data.html#data-frames",
    "title": "Starting with Data",
    "section": "",
    "text": "In R, data frames are one of the most commonly used data structures. They are extremely useful because many real-world datasets come in table format, which aligns well with how data frames organize information. In fact, data frames are the standard format for most data manipulation, plotting, and analysis tasks in R.\nA data frame stores data in a tabular layout where each column is a vector of the same length. Each column can hold only one type of data (e.g., numeric, character, or logical), but different columns can hold different types. For example, one column might contain numbers, another column text, and another logical values like TRUE or FALSE.\nBelow is an illustration showing a simple data frame with three rows and three columns: one numeric, one character, and one logical:\n\nTo explore the structure of a data frame in R, you can use the str() function. This gives you a quick overview of column names, data types, and a preview of values:\n\nstr(colombia_data)\n\n'data.frame':   844 obs. of  16 variables:\n $ adm_0_name                  : chr  \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" ...\n $ adm_1_name                  : logi  NA NA NA NA NA NA ...\n $ adm_2_name                  : logi  NA NA NA NA NA NA ...\n $ full_name                   : chr  \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" ...\n $ ISO_A0                      : chr  \"COL\" \"COL\" \"COL\" \"COL\" ...\n $ FAO_GAUL_code               : int  54 54 54 54 54 54 54 54 54 54 ...\n $ RNE_iso_code                : chr  \"COL\" \"COL\" \"COL\" \"COL\" ...\n $ IBGE_code                   : logi  NA NA NA NA NA NA ...\n $ calendar_start_date         : chr  \"2002-12-29\" \"2004-01-04\" \"2005-01-02\" \"2006-01-01\" ...\n $ calendar_end_date           : chr  \"2003-12-27\" \"2005-01-01\" \"2005-12-31\" \"2006-12-30\" ...\n $ Year                        : int  2002 2004 2005 2006 2006 2006 2007 2007 2007 2007 ...\n $ dengue_total                : int  382 1614 1938 1667 3257 661 3602 611 490 440 ...\n $ case_definition_standardised: chr  \"Total\" \"Total\" \"Total\" \"Total\" ...\n $ S_res                       : chr  \"Admin0\" \"Admin0\" \"Admin0\" \"Admin0\" ...\n $ T_res                       : chr  \"Year\" \"Year\" \"Year\" \"Year\" ...\n $ UUID                        : chr  \"MOH-COL-2005-Y01-00\" \"MOH-COL-2005-Y01-00\" \"MOH-COL-2005-Y01-00\" \"MOH-COL-2006-Y01-01\" ...\n\n\n\n\nBefore we start analysing the data, it’s a good idea to take a quick look to understand what we’re working with. We also want to make sure our data has loaded correctly into R.\nWe’ve already seen a few helpful functions like head(), view(), and str() that give us a quick look at the contents and structure of a data frame. Here are some other basic functions that can help us explore our data:’\n\n\n\ndim(data) — tells you the number of rows and columns.\nnrow(data) — gives you the number of rows.\nncol(data) — gives you the number of columns.\n\n\n\n\n\nhead(data) — shows the first few rows (default is 6).\ntail(data) — shows the last few rows.\n\n\n\n\n\nnames(data) — shows the column names.\nrownames(data) — shows the row names (usually just numbers).\n\n\n\n\n\nstr(data) — gives an overview of the data frame: column names, data types, and a preview of values.\nsummary(data) — provides basic statistics (like min, max, mean) for each column.\n\nNote: Most of these functions also work with other types of objects, not just data.frame.\n\n\n\n\n\n\nA data frame in R is like a table with rows and columns. To look at specific values inside this table, we use numbers to show the position of each item.\nTo get data from a certain row and column, we use square brackets like this: data[row, column]. For example, [2,3] means row 2, column 3.\nImportant: [] are for accessing data. () are for calling functions like mean() or summary().\nLet’s look at a few more examples of how to select parts of a data frame using numbers.\n\n# get the value in the 1st row and 1st column\ncolombia_data[1, 1]\n\n[1] \"COLOMBIA\"\n\n# get the value in the 1st row and 6th column\ncolombia_data[1, 6]\n\n[1] 54\n\n# get the entire 1st column as a vector\ncolombia_data[, 1]\n\n  [1] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n  [7] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [13] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [19] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [25] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [31] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [37] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [43] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [49] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [55] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [61] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [67] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [73] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [79] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [85] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [91] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n [97] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[103] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[109] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[115] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[121] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[127] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[133] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[139] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[145] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[151] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[157] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[163] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[169] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[175] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[181] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[187] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[193] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[199] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[205] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[211] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[217] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[223] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[229] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[235] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[241] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[247] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[253] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[259] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[265] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[271] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[277] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[283] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[289] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[295] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[301] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[307] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[313] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[319] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[325] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[331] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[337] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[343] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[349] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[355] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[361] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[367] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[373] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[379] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[385] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[391] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[397] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[403] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[409] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[415] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[421] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[427] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[433] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[439] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[445] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[451] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[457] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[463] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[469] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[475] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[481] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[487] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[493] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[499] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[505] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[511] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[517] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[523] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[529] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[535] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[541] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[547] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[553] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[559] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[565] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[571] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[577] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[583] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[589] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[595] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[601] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[607] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[613] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[619] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[625] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[631] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[637] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[643] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[649] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[655] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[661] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[667] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[673] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[679] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[685] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[691] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[697] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[703] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[709] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[715] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[721] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[727] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[733] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[739] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[745] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[751] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[757] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[763] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[769] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[775] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[781] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[787] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[793] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[799] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[805] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[811] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[817] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[823] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[829] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[835] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n[841] \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\" \"COLOMBIA\"\n\n# get the first 3 values from the 7th column\ncolombia_data[1:3, 7]\n\n[1] \"COL\" \"COL\" \"COL\"\n\n# get the entire 3rd row as a data frame\ncolombia_data[3, ]\n\n  adm_0_name adm_1_name adm_2_name full_name ISO_A0 FAO_GAUL_code RNE_iso_code\n3   COLOMBIA         NA         NA  COLOMBIA    COL            54          COL\n  IBGE_code calendar_start_date calendar_end_date Year dengue_total\n3        NA          2005-01-02        2005-12-31 2005         1938\n  case_definition_standardised  S_res T_res                UUID\n3                        Total Admin0  Year MOH-COL-2005-Y01-00\n\n# get the first 6 rows (just like the head() function)\nhead_colombia &lt;- colombia_data[1:6, ]\n\nThe : operator helps you create a sequence of numbers. For example:\n\n1:10 gives you numbers from 1 to 10\n10:1 gives you numbers from 10 to 1\n\nYou can also leave out (exclude) parts of a data frame using the minus - sign:\n\n# all columns except the first one\ncolombia_data[, -1]  \n\n# similar to head(colombia), keeps only rows 1 to 6\ncolombia_data[-(7:34786), ]     \n\n\n\n\nInstead of using numbers to access rows and columns, we can also use the names of the columns directly. This is called name indexing.\nHere are a few examples using the colombia data:\n\n# get the \"value\" column as a vector\ncolombia_data[, \"dengue_total\"]\n\n  [1]  382 1614 1938 1667 3257  661 3602  611  490  440  775  623  922  621  629\n [16]  727  731 1005  589  902 1192 1213  589 1141 1041 1017  800  629  657 1056\n [31] 1041 1005  967  766  812  657  896  905  776  822  790  840 1153  752  720\n [46]  584  692  787  668  696  696  834  736  685 1104  591  410  528  709  868\n [61]  862  840  821  790  844  828  740  732  598  593  654  743  715  672  679\n [76]  619  715  706  680  614  750  727  706  611  709  736  696  689  672  588\n [91]  572  559  574  632  592  622  664  661  693  727  785  789  735  742  690\n[106]  561  741  674  676  484  414  711  697  695  639  725  673  670  622  756\n[121]  612  635  610  687  628  718  771  672  670  769  858  838  975  926  882\n[136]  866  962 1001 1032 1058 1082 1108 1128 1148 1169 1225 1197 1156 1258 1240\n[151] 1193 1226 1278 1149 1254 1217 1335 1469 1546 1688 1537 1478 1507 5010 2177\n[166] 2457 2697 3099 3713 4229 4509 4308 4782 4569 4927 4400 4577 4874 4466 4824\n[181] 4600 4496 4771 4785 4511 4395 4374 4244 3892 3632 3494 3181 3287 3012 3028\n[196] 2648 2600 2456 2326 2085 1831 1773 1550 1511 1427 1296 1143 1167 1081 1010\n[211]  906  897  944  835  739  720 1255  759  795  741  660  673  553  603  527\n[226]  545  526  470  480  530  519  494  530  591  584  590  617  622  626  640\n[241]  634  605  549  652  560  546  509  550  520  523  455  571  486  483  507\n[256]  513  470  480  524  552  540  544  569  597  599  632  648  688  697 1448\n[271]  905 1002 1033 1018 1063 1005 1019  948  950  994  953 1170 1136 1292 1375\n[286] 1345 1448 1689  981  802  813  849  895  909  915  909 1061 1009 1004  869\n[301]  920  742  795  929  986 1147 1111 1080 1018  951  902  950  902 1053  967\n[316] 1052 1061 1174 1129 1232 1283 1283 1151 1765 1773 1917 1932 2060 2108 2189\n[331] 2146 2050 2070 3084 3279 2924 2939 2877 2866 3109 3005 2763 2798 2844 2605\n[346] 3056 3002 3013 2703 2435 2366 2167 2292 2048 2101 2204 2231 2260 2292 2212\n[361] 2404 2370 2291 2183 2469 2528 2218 2276 2311 1964 1789 2362 2046 2001 2670\n[376] 2467 2338 2434 2079 2054 2014 2010 1742 1793 1884 1819 1743 2098 1839 1729\n[391] 1878 1844 1816 1812 1974 1707 2011 2104 1724 2087 2149 2091 2100 2025 1836\n[406] 1879 1912 1746 1869 2122 2173 2090 2149 2148 2236 2416 2207 2114 2131 2024\n[421] 1849 2068 2139 2081 2038 2464 1821 2115 1366 1460 1738 1934 2245 2184 2493\n[436] 2388 1992 1930 1839 2106 1977 2085 1921 2015 1967 1732 1688 2116 1807 1757\n[451] 1924 1877 1850 1743 1717 1667 1507 1526 1454 1585 1577 1431 1374 1360 1280\n[466] 1361 1416 1585 1664 1732 1719 1724 1917 2149 2271 2259 2457 2313 2547 2890\n[481] 2630 2179 2938 2422 2844 2559 1589 1486 1528 1126  928  832  812 2762 2981\n[496] 1920 3115 1577 3289 3180 3007 2661 2906 2244 1035 2440  924 2658 2491 2544\n[511] 2699 2578 2543 2394 2192 1971 2040 1622 1395 1322 1210 1149  808 1081  930\n[526]  930  960  939  945  872  900  651  518  466  487  403  475  501  483  439\n[541]  434  452  386  417  482  396  812  816  459  510  496  435  431  432  756\n[556]  691  629  477  483  465  404  419  476  432  430  466  526  505  450  508\n[571]  453  416  481  413  385  468  402  392  366  419  411  481  463  455  426\n[586]  533  452  425  458  403  411  530  488  416  432  477  493 1269 1491  515\n[601]  409  897  383  578  855  330 1332 1582 1227  808  683 1585  797  759 1587\n[616]  914  870  886  911  917 1748  734  887 1055  821  884 1163 1207  914  931\n[631]  906 1447  876  933 1016 1655 1634 2633 3195 3077 1631 2822 1678 2647 1747\n[646] 1840 1669 1669 2287 1860 2286 1830 2347 1832 2625 1919 2523 1799 2398 1853\n[661] 2376 2022 2150 3074 1957 2698 2292 2353 2239 2536 2344 2522 2447 2566 2873\n[676] 2819 2876 2679 2957 2672 2525 3038 2780 2887 2832 3578 2678 3099 3431  639\n[691]  623 3622  647 3452  636 3650  698 3709  632 3428  631 3223  634 3145  702\n[706] 3237  680 2880 1331 1841 1701 1063 1684  910 1609 1037 1582  894 1561  749\n[721] 1450  685 1474  714 1499 1435  659 1230  623 1061  668  672  670  790  687\n[736]  661  644  726  661  711  658  673  626 1576  669 1398  671  582  677  594\n[751]  698  622  687  629  718  632  600  690  571  619  687  551  796  527  574\n[766]  774  570  844  515  899  488 1012  504 1146  568 1138  595 1347  589 1411\n[781]  647 1479 1604 1518 1595 1855 1985 1743 2172 1951 1777 1655 1074 1540  931\n[796]  946 1494  844 1590  931  957  829  784 1709  834  841  839 1697  904 1675\n[811]  985 1603  924 1643 1394  880 1565 1115 1561 1134 1239 1398 1422 1548 1553\n[826] 1443 1268 1267 1366 1306 1299 1472 1324 1488 1367 1161 1325 1405 1337 1728\n[841] 1270 1253 1520 1776\n\n\n\n# this does the same thing\ncolombia_data$dengue_total\n\n\n# get the \"Country\" and \"value\" columns for the first three rows\n# (this mixes row numbers with column names)\ncolombia_data[1:3, c(\"Year\", \"dengue_total\")]\n\n  Year dengue_total\n1 2002          382\n2 2004         1614\n3 2005         1938\n\n\nIn RStudio, you can use the Tab key to auto-complete column names, which helps avoid typos.\n\n\n\nSometimes we want to look at rows in our dataset that match a specific condition. This is called logical indexing. In R, we can use conditions to select the rows that meet our criteria.\nHere’s how we can find and work with records where the year is 2007 in our dataset:\n\n# get all the records where Year is 2007 and save those records into a new data frame\nyear_2007_data &lt;- colombia_data[colombia_data$Year == 2007, ]\n\n# count how many records are from the year 2007\nnrow(year_2007_data)\n\n[1] 53\n\n\nThis method is helpful when you want to focus only on specific parts of your data — for example, all data points from a certain year, a certain region, or with a certain status.\n\n\n\n\nLet’s try a few short tasks to help you explore how to work with rows in your dataset.\n\nCreate a new data frame that only includes row 200 from your dataset. Name it data_200.\nUse nrow() to find how many rows are in your dataset. Then:\n\nPull out the last row using that number.\nUse tail() to check the result.\nSave the last row into a new data frame named data_last.\n\nFind the middle row (the one halfway through the dataset). Save it in an object called data_middle.\nUse negative indexing with nrow() to create a new object that keeps only the first six rows (like using head()).\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n# 1. Get the 200th row\ndata_200 &lt;- colombia_data[200, ]\n\n# 2. Use nrow() to get total number of rows\nn_rows &lt;- nrow(colombia_data)\n\n# Extract last row using total number of rows\ndata_last &lt;- colombia_data[n_rows, ]\n\n# Optional: verify it looks correct\ntail(colombia_data)\n\n    adm_0_name adm_1_name adm_2_name full_name ISO_A0 FAO_GAUL_code\n839   COLOMBIA         NA         NA  COLOMBIA    COL            54\n840   COLOMBIA         NA         NA  COLOMBIA    COL            54\n841   COLOMBIA         NA         NA  COLOMBIA    COL            54\n842   COLOMBIA         NA         NA  COLOMBIA    COL            54\n843   COLOMBIA         NA         NA  COLOMBIA    COL            54\n844   COLOMBIA         NA         NA  COLOMBIA    COL            54\n    RNE_iso_code IBGE_code calendar_start_date calendar_end_date Year\n839          COL        NA          2022-09-04        2022-09-10 2022\n840          COL        NA          2022-11-13        2022-11-19 2022\n841          COL        NA          2022-09-18        2022-09-24 2022\n842          COL        NA          2022-09-25        2022-10-01 2022\n843          COL        NA          2022-11-06        2022-11-12 2022\n844          COL        NA          2022-12-04        2022-12-10 2022\n    dengue_total case_definition_standardised  S_res T_res                UUID\n839         1337                        Total Admin0  Week MOH-COL-2022-Y02-05\n840         1728                        Total Admin0  Week MOH-COL-2022-Y02-05\n841         1270                        Total Admin0  Week MOH-COL-2022-Y02-05\n842         1253                        Total Admin0  Week MOH-COL-2022-Y02-05\n843         1520                        Total Admin0  Week MOH-COL-2022-Y02-05\n844         1776                        Total Admin0  Week MOH-COL-2022-Y02-05\n\n# 3. Get the middle row\ndata_middle &lt;- colombia_data[n_rows/2, ]\n\n# 4. Keep only the first 6 rows (remove rows 7 to the end)\ndata_head &lt;- colombia_data[-(7:n_rows), ]"
  },
  {
    "objectID": "starting_with_data.html#working-with-factors",
    "href": "starting_with_data.html#working-with-factors",
    "title": "Starting with Data",
    "section": "",
    "text": "In our dataset, some columns like T_res (which shows if the data is recorded by week or year) look like text, but they actually represent categories. These kinds of columns are good candidates for factor in R.\n\n\nFactors are a special type in R used for categorical data — data that has a fixed set of possible values (called levels). For example, T_res only includes \"Week\" and \"Year\", and these are its levels.\nBy turning this column into a factor, we can make our data cleaner and often easier to analyze or visualize.\nWe can convert these columns that contain categorical data to type factor by using the factor() function:\n\ncolombia_data$T_res &lt;- factor(colombia_data$T_res)\n\nTo check that it worked, we can use the summary() function:\n\nsummary(colombia_data$T_res)\n\nWeek Year \n 835    9 \n\n\nBy default, R always sorts levels in alphabetical order. For instance, if you have a factor with 2 levels:\n\nsex &lt;- factor(c(\"male\", \"female\", \"female\", \"male\"))\n\nR will assign 1 to the level \"female\" and 2 to the level \"male\" (because f comes before m, even though the first element in this vector is \"male\"). You can see this by using the function levels() and you can find the number of levels using nlevels():\n\nlevels(sex)\n\n[1] \"female\" \"male\"  \n\nnlevels(sex)\n\n[1] 2\n\n\nSometimes, the order of the factors does not matter, other times you might want to specify the order because it is meaningful (e.g., “low”, “medium”, “high”), it improves your visualization, or it is required by a particular type of analysis. Here, one way to reorder our levels in the sex vector would be:\n\nsex # current order\n\n[1] male   female female male  \nLevels: female male\n\n\n\nsex &lt;- factor(sex, levels = c(\"male\", \"female\"))\nsex # after re-ordering\n\n[1] male   female female male  \nLevels: male female\n\n\nIn R’s memory, these factors are represented by integers (1, 2, 3), but are more informative than integers because factors are self describing: \"female\", \"male\" is more descriptive than 1, 2. Which one is “male”? You wouldn’t be able to tell just from the integer data. Factors, on the other hand, have this information built in. It is particularly helpful when there are many levels (like the species names in our example dataset).\n\n\n\nIf you need to convert a factor to a character vector, you use as.character(x).\n\nas.character(sex)\n\n[1] \"male\"   \"female\" \"female\" \"male\"  \n\n\nIn some cases, you may have to convert factors where the levels appear as numbers (such as concentration levels or years) to a numeric vector. For instance, in one part of your analysis the years might need to be encoded as factors (e.g., comparing average weights across years) but in another part of your analysis they may need to be stored as numeric values (e.g., doing math operations on the years). This conversion from factor to numeric is a little trickier. The as.numeric() function returns the index values of the factor, not its levels, so it will result in an entirely new (and unwanted in this case) set of numbers. One method to avoid this is to convert factors to characters, and then to numbers.\nAnother method is to use the levels() function. Compare:\n\nyear_fct &lt;- factor(c(1990, 1983, 1977, 1998, 1990))\nas.numeric(year_fct)               # Wrong! And there is no warning...\n\n[1] 3 2 1 4 3\n\nas.numeric(as.character(year_fct)) # Works...\n\n[1] 1990 1983 1977 1998 1990\n\nas.numeric(levels(year_fct))[year_fct]    # The recommended way.\n\n[1] 1990 1983 1977 1998 1990\n\n\nNotice that in the levels() approach, three important steps occur:\n\nWe obtain all the factor levels using levels(year_fct).\nWe convert these levels to numeric values using as.numeric(levels(year_fct)).\nWe then access these numeric values using the underlying integers of the vector year_fct inside the square brackets."
  },
  {
    "objectID": "starting_with_data.html#selecting-columns",
    "href": "starting_with_data.html#selecting-columns",
    "title": "Starting with Data",
    "section": "Selecting Columns",
    "text": "Selecting Columns\nIn base R, to select specific columns from a data frame, use the [] operator with the format: data_frame[rows, columns].\nExample 1: Select specific columns from colombia\n\ncolombia_selected &lt;- colombia_data[,c(\"calendar_start_date\", \"calendar_end_date\", \"Year\", \"dengue_total\")]\n\nThis creates a new data frame colombia_selected that keeps only those four columns.\nExample 2: Select all columns except some\nLet’s say you want to keep everything except the UUID and IBGE_code columns:\n\n# find all column names except the ones to remove\ncolumns_to_keep &lt;- setdiff(names(colombia_data), c(\"UUID\", \"IBGE_code\"))\n\n# subset the data frame\ncolombia_fewer_columns &lt;- colombia_data[ , columns_to_keep]\n\nNow colombia_fewer_columns contains all the original columns except UUID and IBGE_code."
  },
  {
    "objectID": "starting_with_data.html#filtering-rows",
    "href": "starting_with_data.html#filtering-rows",
    "title": "Starting with Data",
    "section": "Filtering Rows",
    "text": "Filtering Rows\nSometimes you only want to keep rows that meet a certain condition—for example, rows from a specific year or rows with a particular value in a column. Instead of using dplyr::filter(), you can use basic R subsetting with square brackets [].\nExample 1: Keep rows from the year 2010 or later\n\ncolombia_2010 &lt;- colombia_data[colombia_data$Year &gt;= 2010, ]\n\nThis keeps all columns, but only the rows where the Year is 2010 or greater.\nExample 2: Keep rows from 2010 or later and where resolution is \"Year\"\nIf you want to apply multiple conditions, just combine them using & (and) or | (or).\n\ncolombia_filtered &lt;- colombia_data[colombia_data$Year &gt;= 2010 & colombia_data$T_res == \"Year\", ]\n\nNow colombia_filtered only keeps rows where:\n\nthe year is 2010 or later\nand T_res is \"Year\""
  },
  {
    "objectID": "starting_with_data.html#removing-rows-with-missing-values",
    "href": "starting_with_data.html#removing-rows-with-missing-values",
    "title": "Starting with Data",
    "section": "Removing Rows with Missing Values",
    "text": "Removing Rows with Missing Values\nIt is very common that the raw datasets contain missing values (known in R as NA) in some columns. These indicate that there is no data available for those cells.\nFor example, suppose we want to work only with rows in the colombia dataset where both dengue_total and calendar_start_date are not missing.\nWhat is NA?\n\nNA means “Not Available”.\nYou’ll see NA when values are missing in your data.\nR functions like mean() or plot() may return errors or warnings if you don’t handle these missing values first.\n\n\nHow to Check for Missing Values\nTo check which values are missing in a column:\n\n# Check which values are missing in 'dengue_total'\nis.na(colombia_data$dengue_total)\n\n\n# Check which values are NOT missing\n!is.na(colombia_data$dengue_total)\n\nThis gives you a logical vector (TRUE or FALSE) showing where the missing values are.\n\n\nFilter Out Missing Values\nYou can remove rows with missing values in a column by using logical indexing:\n\n# Keep only rows where dengue_total is not missing\ncolombia_clean &lt;- colombia_data[!is.na(colombia_data$dengue_total), ]\n\nIf you want to remove rows where either dengue_total or calendar_start_date is missing:\n\ncolombia_clean2 &lt;- colombia_data[!is.na(colombia_data$dengue_total) & !is.na(colombia_data$calendar_start_date), ]\n\nThis method keeps only the rows where both columns have valid (non-missing) data."
  },
  {
    "objectID": "starting_with_data.html#creating-new-columns",
    "href": "starting_with_data.html#creating-new-columns",
    "title": "Starting with Data",
    "section": "Creating New Columns",
    "text": "Creating New Columns\nFrequently, you will need to create a new column in your datasets based on the values in existing columns. For example, you may want to:\n\nConvert units (e.g., cases per 1000 people)\nCompute new ratios (e.g., dengue cases per week),\nOr just derive new information for analysis or plotting, etc\n\nLet’s learn how to do this using basic R.\nExample 1: Convert dengue_total to Dengue per Thousand\n\ncolombia_data$dengue_per_1000 &lt;- colombia_data$dengue_total / 1000\n\nThis adds a new column named dengue_per_1000 to the colombia data frame.\nExample 2: Create a New Column Based on the One We Just Made\nNow let’s make another column that doubles the value we just created:\n\ncolombia_data$dengue_per_1000_x2 &lt;- colombia_data$dengue_per_1000 * 2\n\nThis creates a second new column that simply multiplies the dengue_per_1000 column by 2.\n\nRecap\n\nUse the $ operator to create new columns in a data frame.\nYou can add new columns on any existing ones."
  },
  {
    "objectID": "starting_with_data.html#sorting-data",
    "href": "starting_with_data.html#sorting-data",
    "title": "Starting with Data",
    "section": "Sorting data",
    "text": "Sorting data\nIf we want to sort our data by one or more columns—for example, sorting by year or by total number of dengue cases, we can do this using the order() function. Here’s how it works:\n\nSort one column in ascending order\n\n# Sort the dataframe by dengue_total in ascending order\ncolombia_sorted &lt;- colombia_data[order(colombia_data$dengue_total), ]\n\n\n\nSort one column in descending order\nTo sort in descending order, just put a minus - in front of the column inside order() (if it’s numeric):\n\n# Sort the dataframe by dengue_total in descending order\ncolombia_sorted_desc &lt;- colombia_data[order(-colombia_data$dengue_total), ]\n\n\n\nSort by multiple columns\nYou can sort by more than one column by adding them to order() in the order of priority:\n\n# Sort by dengue_total (ascending), and then by Year (descending)\ncolombia_sorted_multi &lt;- colombia_data[order(colombia_data$dengue_total, -colombia_data$Year), ]\n\nThis means it will first sort by total dengue cases, and when there are ties, it will sort those rows by year from most recent to oldest."
  },
  {
    "objectID": "starting_with_data.html#summarising-data",
    "href": "starting_with_data.html#summarising-data",
    "title": "Starting with Data",
    "section": "Summarising Data",
    "text": "Summarising Data\nCreating summaries of your data would be a good way to start describing the variable you are working with. Summary statistics are a good example of how one can summarize data.\nLet’s say we want to look at the average number of dengue cases (dengue_total) in the colombia dataset. We can use the mean() function in base R:\n\n# Calculate the average number of dengue cases\nmean(colombia_data$dengue_total, na.rm = TRUE)\n\n[1] 1424.981\n\n\nWe use na.rm = TRUE to ignore missing values (NA) when calculating the mean.\n\nFrequency: Counting Values\nAnother common summary task is counting how many times each category appears. For example, we can count how often each type of time resolution (T_res) appears:\n\n# Count the number of observations for each value of T_res\ntable(colombia_data$T_res)\n\n\nWeek Year \n 835    9 \n\n\nThis will return the frequency of each unique value in the T_res column.\nTo count combinations of two columns, like T_res and full_name (temporal and spatial resolution):\n\n# Count the number of observations for each combination of T_res and S_res\ntable(colombia_data$T_res, colombia_data$full_name)\n\n      \n       COLOMBIA\n  Week      835\n  Year        9\n\n\nThis will show a cross-tabulation of how many rows have each combination of T_res and S_res."
  }
]